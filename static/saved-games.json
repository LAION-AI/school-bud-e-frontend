{
  "games": [
    {
      "id": "343b3e02-d9f7-43e0-80db-abd6c517e295",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#f1f8e9',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false\n    }\n  },\n  scene: { preload, create, update },\n  parent: 'phaser-game'\n};\n\nconst game = new Phaser.Game(config);\n\nlet player;\nlet platforms;\nlet cursors;\nlet stars;\nlet score = 0;\nlet scoreText;\n\nfunction preload() {\n  // Load the background image.\n  this.load.image('sky', '/games/currency.png');\n  // Load the platform image.\n  this.load.image('ground', '/games/currency.png');\n  // Load the collectible star image.\n  this.load.image('star', '/games/currency.png');\n  // Load the spritesheet for the player.\n  // Ensure the 'dude.png' exists at this path and each frame is 32x48 pixels.\n  this.load.spritesheet('dude', '/games/currency.png', { frameWidth: 32, frameHeight: 48 });\n}\n\nfunction create() {\n  // Add the background image.\n  this.add.image(400, 300, 'sky');\n\n  // Create a static group for platforms.\n  platforms = this.physics.add.staticGroup();\n  platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n  platforms.create(600, 400, 'ground');\n  platforms.create(50, 250, 'ground');\n  platforms.create(750, 220, 'ground');\n\n  // Create the player sprite and set its physics properties.\n  player = this.physics.add.sprite(100, 450, 'dude');\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n\n  // Define animations for left and right movements.\n  this.anims.create({\n    key: 'left',\n    frames: this.anims.generateFrameNumbers('dude', { start: 1, end: 1 }),\n    frameRate: 10,\n    repeat: -1\n  });\n  this.anims.create({\n    key: 'right',\n    frames: this.anims.generateFrameNumbers('dude', { start: 1, end: 1 }),\n    frameRate: 10,\n    repeat: -1\n  });\n  // Optionally define a \"turn\" animation if needed.\n  this.anims.create({\n    key: 'turn',\n    frames: [{ key: 'dude', frame: 1 }],\n    frameRate: 20\n  });\n\n  // Add collision between the player and the platforms.\n  this.physics.add.collider(player, platforms);\n\n  // Set up keyboard input.\n  cursors = this.input.keyboard.createCursorKeys();\n\n  // Create a group for collectible stars.\n  stars = this.physics.add.group({\n    key: 'star',\n    repeat: 11,\n    setXY: { x: 12, y: 0, stepX: 70 }\n  });\n\n  // Give each star a slight bounce.\n  stars.children.iterate(function(child) {\n    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\n  });\n\n  // Add collision between stars and platforms.\n  this.physics.add.collider(stars, platforms);\n  // Check for overlap between the player and the stars.\n  this.physics.add.overlap(player, stars, collectStar, null, this);\n\n  // Display the score.\n  scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#000' });\n}\n\nfunction update() {\n  // Horizontal movement.\n  if (cursors.left.isDown) {\n    player.setVelocityX(-160);\n    player.anims.play('left', true);\n  } else if (cursors.right.isDown) {\n    player.setVelocityX(160);\n    player.anims.play('right', true);\n  } else {\n    player.setVelocityX(0);\n    // Stop any current animation before setting the idle frame.\n    player.anims.stop();\n    player.setFrame(0);\n  }\n\n  // Allow the player to jump if they are touching the ground.\n  if (cursors.up.isDown && player.body.touching.down) {\n    player.setVelocityY(-330);\n  }\n}\n\n// Callback when a star is collected.\nfunction collectStar(player, star) {\n  star.disableBody(true, true);\n  score += 10;\n  scoreText.setText('Score: ' + score);\n}\n",
      "timestamp": "2025-02-03T17:54:58.011Z",
      "points": 40
    },
    {
      "id": "6d1823b3-5b7a-4099-a46d-c5415d5c86eb",
      "name": "Multiplication Game",
      "code": "const config = {parent: 'phaser-game', type: Phaser.AUTO, width: 800, height: 600, backgroundColor: '#f1f8e9', scene: { preload, create, update } }; const game = new Phaser.Game(config); let currentAnswers = []; let correctAnswer; let score = 0; let mistakes = []; function preload() { } function create() { this.titleText = this.add.text(400, 50, 'Binary Multiplication Game', { font: '28px Arial', fill: '#33691e' }).setOrigin(0.5); this.resultText = this.add.text(400, 500, '', { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); generateBinaryQuestion(this); this.input.keyboard.on('keydown', handleKeyPress, this); } function update() { } function generateBinaryQuestion(scene) { const a = Phaser.Math.Between(1, 15).toString(2); const b = Phaser.Math.Between(1, 15).toString(2); correctAnswer = parseInt(a, 2) * parseInt(b, 2); scene.questionText = scene.add.text(400, 150, `What is ${a} * ${b} in binary?`, { font: '24px Arial', fill: '#558b2f' }).setOrigin(0.5); if (scene.answerTexts) { scene.answerTexts.forEach(text => text.destroy()); } currentAnswers = [correctAnswer.toString(2), (correctAnswer + 1).toString(2), (correctAnswer - 1).toString(2)]; Phaser.Utils.Array.Shuffle(currentAnswers); scene.answerTexts = currentAnswers.map((answer, index) => { return scene.add.text(400, 200 + index * 50, `${index + 1}: ${answer}`, { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); }); } function handleKeyPress(event) { const keyIndex = parseInt(event.key) - 1; if (keyIndex >= 0 && keyIndex < currentAnswers.length) { const selectedAnswer = parseInt(currentAnswers[keyIndex], 2); if (selectedAnswer === correctAnswer) { this.resultText.setText('Correct!'); score += 10; gameScore('Binary Multiplication Game', score); } else { this.resultText.setText('Incorrect, try again!'); mistakes.push(`Mistake: ${currentAnswers[keyIndex]} for ${correctAnswer.toString(2)} (${currentAnswers.join(', ')})`); console.log(mistakes); } setTimeout(() => { resetQuestion(this); }, 500); } } function resetQuestion(scene) { scene.questionText.destroy(); scene.answerTexts.forEach(text => text.destroy()); scene.resultText.setText(''); generateBinaryQuestion(scene); }",
      "timestamp": "2025-02-03T18:15:22.718Z",
      "points": 0
    }
  ]
}