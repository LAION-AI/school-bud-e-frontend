{
  "games": [
    {
      "id": "343b3e02-d9f7-43e0-80db-abd6c517e295",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#f1f8e9',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false\n    }\n  },\n  scene: { preload, create, update },\n  parent: 'phaser-game'\n};\n\nconst game = new Phaser.Game(config);\n\nlet player;\nlet platforms;\nlet cursors;\nlet stars;\nlet score = 0;\nlet scoreText;\n\nfunction preload() {\n  // Load the background image.\n  this.load.image('sky', '/games/currency.png');\n  // Load the platform image.\n  this.load.image('ground', '/games/currency.png');\n  // Load the collectible star image.\n  this.load.image('star', '/games/currency.png');\n  // Load the spritesheet for the player.\n  // Ensure the 'dude.png' exists at this path and each frame is 32x48 pixels.\n  this.load.spritesheet('dude', '/games/currency.png', { frameWidth: 32, frameHeight: 48 });\n}\n\nfunction create() {\n  // Add the background image.\n  this.add.image(400, 300, 'sky');\n\n  // Create a static group for platforms.\n  platforms = this.physics.add.staticGroup();\n  platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n  platforms.create(600, 400, 'ground');\n  platforms.create(50, 250, 'ground');\n  platforms.create(750, 220, 'ground');\n\n  // Create the player sprite and set its physics properties.\n  player = this.physics.add.sprite(100, 450, 'dude');\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n\n  // Define animations for left and right movements.\n  this.anims.create({\n    key: 'left',\n    frames: this.anims.generateFrameNumbers('dude', { start: 1, end: 1 }),\n    frameRate: 10,\n    repeat: -1\n  });\n  this.anims.create({\n    key: 'right',\n    frames: this.anims.generateFrameNumbers('dude', { start: 1, end: 1 }),\n    frameRate: 10,\n    repeat: -1\n  });\n  // Optionally define a \"turn\" animation if needed.\n  this.anims.create({\n    key: 'turn',\n    frames: [{ key: 'dude', frame: 1 }],\n    frameRate: 20\n  });\n\n  // Add collision between the player and the platforms.\n  this.physics.add.collider(player, platforms);\n\n  // Set up keyboard input.\n  cursors = this.input.keyboard.createCursorKeys();\n\n  // Create a group for collectible stars.\n  stars = this.physics.add.group({\n    key: 'star',\n    repeat: 11,\n    setXY: { x: 12, y: 0, stepX: 70 }\n  });\n\n  // Give each star a slight bounce.\n  stars.children.iterate(function(child) {\n    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\n  });\n\n  // Add collision between stars and platforms.\n  this.physics.add.collider(stars, platforms);\n  // Check for overlap between the player and the stars.\n  this.physics.add.overlap(player, stars, collectStar, null, this);\n\n  // Display the score.\n  scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '32px', fill: '#000' });\n}\n\nfunction update() {\n  // Horizontal movement.\n  if (cursors.left.isDown) {\n    player.setVelocityX(-160);\n    player.anims.play('left', true);\n  } else if (cursors.right.isDown) {\n    player.setVelocityX(160);\n    player.anims.play('right', true);\n  } else {\n    player.setVelocityX(0);\n    // Stop any current animation before setting the idle frame.\n    player.anims.stop();\n    player.setFrame(0);\n  }\n\n  // Allow the player to jump if they are touching the ground.\n  if (cursors.up.isDown && player.body.touching.down) {\n    player.setVelocityY(-330);\n  }\n}\n\n// Callback when a star is collected.\nfunction collectStar(player, star) {\n  star.disableBody(true, true);\n  score += 10;\n  scoreText.setText('Score: ' + score);\n}\n",
      "timestamp": "2025-02-03T17:54:58.011Z",
      "totalPoints": 40
    },
    {
      "id": "6d1823b3-5b7a-4099-a46d-c5415d5c86eb",
      "name": "Multiplication Game",
      "code": "const config = {parent: 'phaser-game', type: Phaser.AUTO, width: 800, height: 600, backgroundColor: '#f1f8e9', scene: { preload, create, update } }; const game = new Phaser.Game(config); let currentAnswers = []; let correctAnswer; let score = 0; let mistakes = []; function preload() { } function create() { this.titleText = this.add.text(400, 50, 'Binary Multiplication Game', { font: '28px Arial', fill: '#33691e' }).setOrigin(0.5); this.resultText = this.add.text(400, 500, '', { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); generateBinaryQuestion(this); this.input.keyboard.on('keydown', handleKeyPress, this); } function update() { } function generateBinaryQuestion(scene) { const a = Phaser.Math.Between(1, 15).toString(2); const b = Phaser.Math.Between(1, 15).toString(2); correctAnswer = parseInt(a, 2) * parseInt(b, 2); scene.questionText = scene.add.text(400, 150, `What is ${a} * ${b} in binary?`, { font: '24px Arial', fill: '#558b2f' }).setOrigin(0.5); if (scene.answerTexts) { scene.answerTexts.forEach(text => text.destroy()); } currentAnswers = [correctAnswer.toString(2), (correctAnswer + 1).toString(2), (correctAnswer - 1).toString(2)]; Phaser.Utils.Array.Shuffle(currentAnswers); scene.answerTexts = currentAnswers.map((answer, index) => { return scene.add.text(400, 200 + index * 50, `${index + 1}: ${answer}`, { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); }); } function handleKeyPress(event) { const keyIndex = parseInt(event.key) - 1; if (keyIndex >= 0 && keyIndex < currentAnswers.length) { const selectedAnswer = parseInt(currentAnswers[keyIndex], 2); if (selectedAnswer === correctAnswer) { this.resultText.setText('Correct!'); score += 10; gameScore('Binary Multiplication Game', score); } else { this.resultText.setText('Incorrect, try again!'); mistakes.push(`Mistake: ${currentAnswers[keyIndex]} for ${correctAnswer.toString(2)} (${currentAnswers.join(', ')})`); console.log(mistakes); } setTimeout(() => { resetQuestion(this); }, 500); } } function resetQuestion(scene) { scene.questionText.destroy(); scene.answerTexts.forEach(text => text.destroy()); scene.resultText.setText(''); generateBinaryQuestion(scene); }",
      "timestamp": "2025-02-03T18:15:22.718Z",
      "totalPoints": 0
    },
    {
      "id": "ccf899f4-c55a-4ab0-b935-aef7301416e6",
      "name": "Binary Multiplication Game Edit",
      "code": "const config = { type: Phaser.AUTO, width: 800, height: 600, backgroundColor: '#f1f8e9', scene: { preload, create, update }, parent: 'phaser-game' }; const game = new Phaser.Game(config); let currentAnswers = []; let correctAnswer; let score = 0; let mistakes = []; function preload() { } function create() { this.titleText = this.add.text(400, 50, 'Binary Multiplication Game', { font: '28px Arial', fill: '#33691e' }).setOrigin(0.5); this.resultText = this.add.text(400, 500, '', { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); generateBinaryQuestion(this); this.input.keyboard.on('keydown', handleKeyPress, this); } function update() { } function generateBinaryQuestion(scene) { const a = Phaser.Math.Between(1, 15).toString(2); const b = Phaser.Math.Between(1, 15).toString(2); correctAnswer = parseInt(a, 2) * parseInt(b, 2); scene.questionText = scene.add.text(400, 150, `What is ${a} * ${b} in binary?`, { font: '24px Arial', fill: '#558b2f' }).setOrigin(0.5); if (scene.answerTexts) { scene.answerTexts.forEach(text => text.destroy()); } currentAnswers = [correctAnswer.toString(2), (correctAnswer + 1).toString(2), (correctAnswer - 1).toString(2)]; Phaser.Utils.Array.Shuffle(currentAnswers); scene.answerTexts = currentAnswers.map((answer, index) => { return scene.add.text(400, 200 + index * 50, `${index + 1}: ${answer}`, { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); }); } function handleKeyPress(event) { const keyIndex = parseInt(event.key) - 1; if (keyIndex >= 0 && keyIndex < currentAnswers.length) { const selectedAnswer = parseInt(currentAnswers[keyIndex], 2); if (selectedAnswer === correctAnswer) { this.resultText.setText('Correct!'); score += 10; gameScore('Binary Multiplication Game', score); } else { this.resultText.setText('Incorrect, try again!'); mistakes.push(`Mistake: ${currentAnswers[keyIndex]} for ${correctAnswer.toString(2)} (${currentAnswers.join(', ')})`); console.log(mistakes); } setTimeout(() => { resetQuestion(this); }, 500); } } function resetQuestion(scene) { scene.questionText.destroy(); scene.answerTexts.forEach(text => text.destroy()); scene.resultText.setText(''); generateBinaryQuestion(scene); }",
      "timestamp": "2025-02-04T11:28:21.901Z",
      "totalPoints": 0
    },
    {
      "id": "14d0fd85-2926-47d6-b412-5e25dd02a951",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#b3e5fc',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global variables for binary question UI, score, and level\nlet currentAnswers = [];\nlet correctAnswer = 0;\nlet questionActive = false;\nlet questionText;\nlet answerTexts = [];\nlet score = 0;\nlet scoreText;\nlet mistakes = [];\nlet level = 1;\nlet levelText;\n\nfunction preload() {\n  // Create a graphics object for drawing textures\n  this.graphics = this.add.graphics();\n\n  // Create a simple player texture (blue rectangle)\n  this.graphics.fillStyle(0x0000ff, 1);\n  this.graphics.fillRect(0, 0, 32, 48);\n  this.graphics.generateTexture('player', 32, 48);\n  this.graphics.clear();\n\n  // Create a simple enemy texture (red rectangle)\n  this.graphics.fillStyle(0xff0000, 1);\n  this.graphics.fillRect(0, 0, 32, 32);\n  this.graphics.generateTexture('enemy', 32, 32);\n  this.graphics.clear();\n\n  // Create a platform texture (green rectangle)\n  this.graphics.fillStyle(0x00ff00, 1);\n  this.graphics.fillRect(0, 0, 400, 32);\n  this.graphics.generateTexture('platform', 400, 32);\n  this.graphics.clear();\n}\n\nfunction create() {\n  // Create platforms using a static physics group\n  this.platforms = this.physics.add.staticGroup();\n  // Ground platform (stretched to cover the bottom)\n  this.platforms.create(400, 584, 'platform').setScale(2).refreshBody();\n  // Additional platforms\n  this.platforms.create(600, 400, 'platform');\n  this.platforms.create(50, 250, 'platform');\n  this.platforms.create(750, 220, 'platform');\n\n  // Create the player sprite and enable physics\n  this.player = this.physics.add.sprite(100, 450, 'player');\n  this.player.setBounce(0.2);\n  this.player.setCollideWorldBounds(true);\n\n  // Create enemies group and add multiple enemies\n  this.enemies = this.physics.add.group();\n  // Enemy 1\n  let enemy1 = this.enemies.create(700, 450, 'enemy');\n  enemy1.setBounce(1);\n  enemy1.setCollideWorldBounds(true);\n  enemy1.setVelocityX(-100);\n  // Enemy 2\n  let enemy2 = this.enemies.create(400, 300, 'enemy');\n  enemy2.setBounce(1);\n  enemy2.setCollideWorldBounds(true);\n  enemy2.setVelocityX(80);\n  // Enemy 3\n  let enemy3 = this.enemies.create(600, 150, 'enemy');\n  enemy3.setBounce(1);\n  enemy3.setCollideWorldBounds(true);\n  enemy3.setVelocityX(-120);\n\n  // Enable collisions between the player/enemies and the platforms\n  this.physics.add.collider(this.player, this.platforms);\n  this.physics.add.collider(this.enemies, this.platforms);\n\n  // When an enemy overlaps the player, trigger the question routine\n  this.physics.add.overlap(this.player, this.enemies, onEnemyHit, null, this);\n\n  // Set up keyboard controls for player movement\n  this.cursors = this.input.keyboard.createCursorKeys();\n\n  // Create score text\n  scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '20px', fill: '#000' });\n  \n  // Create level text\n  levelText = this.add.text(16, 40, 'Level: 1', { fontSize: '20px', fill: '#000' });\n\n  // Create a text object for showing the result (used for question feedback)\n  this.resultText = this.add.text(400, 350, '', { font: '24px Arial', fill: '#000' }).setOrigin(0.5);\n\n  // Listen for keyboard events (for answering binary questions)\n  this.input.keyboard.on('keydown', handleKeyPress, this);\n}\n\nfunction update() {\n  if (!questionActive) {\n    // --- Player movement logic ---\n    if (this.cursors.left.isDown) {\n      this.player.setVelocityX(-160);\n    } else if (this.cursors.right.isDown) {\n      this.player.setVelocityX(160);\n    } else {\n      this.player.setVelocityX(0);\n    }\n    if (this.cursors.up.isDown && this.player.body.touching.down) {\n      this.player.setVelocityY(-330);\n    }\n\n    // --- Enemy patrol logic ---\n    this.enemies.getChildren().forEach(enemy => {\n      if (enemy.body.blocked.left) {\n        enemy.setVelocityX(Math.abs(enemy.body.velocity.x));\n      } else if (enemy.body.blocked.right) {\n        enemy.setVelocityX(-Math.abs(enemy.body.velocity.x));\n      }\n    });\n\n    // --- Level progression logic ---\n    // If the player reaches near the top of the screen, advance to the next level.\n    if (this.player.y < 50) {\n      nextLevel(this);\n    }\n  }\n}\n\n// This function is called when an enemy hits the player.\nfunction onEnemyHit(player, enemy) {\n  if (!questionActive) {\n    questionActive = true;\n    // Pause the physics to \"freeze\" the game during the question\n    this.physics.pause();\n    // Show the binary multiplication question UI\n    generateBinaryQuestion(this);\n  }\n}\n\n// This function generates and displays a binary multiplication question.\nfunction generateBinaryQuestion(scene) {\n  // Generate two random numbers (1 to 15) and convert them to binary strings.\n  const a = Phaser.Math.Between(1, 15);\n  const b = Phaser.Math.Between(1, 15);\n  const aBinary = a.toString(2);\n  const bBinary = b.toString(2);\n  correctAnswer = a * b;\n\n  // Display the question in the center of the screen.\n  questionText = scene.add.text(\n    400,\n    200,\n    `What is ${aBinary} * ${bBinary} in binary?`,\n    { font: '24px Arial', fill: '#000' }\n  ).setOrigin(0.5);\n\n  // Create three answer options: the correct answer, one more, and one less.\n  currentAnswers = [\n    correctAnswer.toString(2),\n    (correctAnswer + 1).toString(2),\n    (correctAnswer - 1).toString(2)\n  ];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n\n  // Display the answer options.\n  answerTexts = [];\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let optionText = scene.add.text(\n      400,\n      250 + i * 40,\n      `${i + 1}: ${currentAnswers[i]}`,\n      { font: '24px Arial', fill: '#000' }\n    ).setOrigin(0.5);\n    answerTexts.push(optionText);\n  }\n}\n\n// This function handles key presses for answering the question.\nfunction handleKeyPress(event) {\n  // Only process input if a question is active.\n  if (!questionActive) {\n    return;\n  }\n  // Check if the pressed key is '1', '2', or '3'.\n  const keyIndex = parseInt(event.key) - 1;\n  if (keyIndex >= 0 && keyIndex < currentAnswers.length) {\n    // Convert the chosen binary answer to an integer.\n    const selectedAnswer = parseInt(currentAnswers[keyIndex], 2);\n    if (selectedAnswer === correctAnswer) {\n      // Correct answer\n      this.resultText.setText('Correct!');\n      score += 10;\n      scoreText.setText('Score: ' + score);\n      setTimeout(() => {\n        resetQuestion(this);\n      }, 500);\n    } else {\n      // Incorrect answer\n      this.resultText.setText('Incorrect, try again!');\n      mistakes.push(`Mistake: Selected ${currentAnswers[keyIndex]} instead of ${correctAnswer.toString(2)}`);\n      console.log(mistakes);\n      // Reset the question after a short delay to allow another try.\n      setTimeout(() => {\n        resetQuestion(this);\n      }, 500);\n    }\n  }\n}\n\n// This function removes the question UI and resumes the game.\nfunction resetQuestion(scene) {\n  if (questionText) {\n    questionText.destroy();\n  }\n  answerTexts.forEach(text => text.destroy());\n  scene.resultText.setText('');\n  questionActive = false;\n  // Resume physics so the game continues.\n  scene.physics.resume();\n}\n\n// This function advances the game to the next level.\nfunction nextLevel(scene) {\n  // Increase the level counter and update the display.\n  level++;\n  levelText.setText('Level: ' + level);\n  \n  // Optionally, add a new enemy to increase the challenge.\n  let newEnemyX = Phaser.Math.Between(50, 750);\n  let newEnemyY = Phaser.Math.Between(50, 300);\n  let newEnemy = scene.enemies.create(newEnemyX, newEnemyY, 'enemy');\n  newEnemy.setBounce(1);\n  newEnemy.setCollideWorldBounds(true);\n  // Set a random horizontal velocity between 100 and 150 (with a random direction).\n  let velocityX = Phaser.Math.Between(100, 150);\n  if (Phaser.Math.Between(0, 1)) {\n    velocityX = -velocityX;\n  }\n  newEnemy.setVelocityX(velocityX);\n\n  // Reset the player's position to the bottom of the screen.\n  scene.player.setPosition(100, 450);\n}\n",
      "timestamp": "2025-02-04T12:24:22.043Z",
      "totalPoints": 0
    },
    {
      "id": "8b7daa57-2c3f-4b2b-8c24-7aae2fa6f7fb",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#b3e5fc',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 300 },\n      debug: false\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global variables for binary question UI, score, level, and cooldown\nlet currentAnswers = [];\nlet correctAnswer = 0;\nlet questionActive = false;\nlet questionText;\nlet answerTexts = [];\nlet score = 0;\nlet scoreText;\nlet mistakes = [];\nlet level = 1;\nlet levelText;\nlet hitCooldown = false; // cooldown flag to prevent multiple hits\n\nfunction preload() {\n  // Create a graphics object for drawing textures\n  this.graphics = this.add.graphics();\n\n  // Create a simple player texture (blue rectangle)\n  this.graphics.fillStyle(0x0000ff, 1);\n  this.graphics.fillRect(0, 0, 32, 48);\n  this.graphics.generateTexture('player', 32, 48);\n  this.graphics.clear();\n\n  // Create a simple enemy texture (red rectangle)\n  this.graphics.fillStyle(0xff0000, 1);\n  this.graphics.fillRect(0, 0, 32, 32);\n  this.graphics.generateTexture('enemy', 32, 32);\n  this.graphics.clear();\n\n  // Create a platform texture (green rectangle)\n  this.graphics.fillStyle(0x00ff00, 1);\n  this.graphics.fillRect(0, 0, 400, 32);\n  this.graphics.generateTexture('platform', 400, 32);\n  this.graphics.clear();\n}\n\nfunction create() {\n  // Create platforms using a static physics group\n  this.platforms = this.physics.add.staticGroup();\n  // Ground platform (stretched to cover the bottom)\n  this.platforms.create(400, 584, 'platform').setScale(2).refreshBody();\n  // Additional platforms\n  this.platforms.create(600, 400, 'platform');\n  this.platforms.create(50, 250, 'platform');\n  this.platforms.create(750, 220, 'platform');\n\n  // Create the player sprite and enable physics\n  this.player = this.physics.add.sprite(100, 450, 'player');\n  this.player.setBounce(0.2);\n  this.player.setCollideWorldBounds(true);\n\n  // Create enemies group and add multiple enemies\n  this.enemies = this.physics.add.group();\n  // Enemy 1\n  let enemy1 = this.enemies.create(700, 450, 'enemy');\n  enemy1.setBounce(1);\n  enemy1.setCollideWorldBounds(true);\n  enemy1.setVelocityX(-100);\n  // Enemy 2\n  let enemy2 = this.enemies.create(400, 300, 'enemy');\n  enemy2.setBounce(1);\n  enemy2.setCollideWorldBounds(true);\n  enemy2.setVelocityX(80);\n  // Enemy 3\n  let enemy3 = this.enemies.create(600, 150, 'enemy');\n  enemy3.setBounce(1);\n  enemy3.setCollideWorldBounds(true);\n  enemy3.setVelocityX(-120);\n\n  // Enable collisions between the player/enemies and the platforms\n  this.physics.add.collider(this.player, this.platforms);\n  this.physics.add.collider(this.enemies, this.platforms);\n\n  // When an enemy overlaps the player, trigger the question routine (with cooldown check)\n  this.physics.add.overlap(this.player, this.enemies, onEnemyHit, null, this);\n\n  // Set up keyboard controls for player movement\n  this.cursors = this.input.keyboard.createCursorKeys();\n\n  // Create score text\n  scoreText = this.add.text(16, 16, 'Score: 0', { fontSize: '20px', fill: '#000' });\n  \n  // Create level text\n  levelText = this.add.text(16, 40, 'Level: 1', { fontSize: '20px', fill: '#000' });\n\n  // Create a text object for showing the result (used for question feedback)\n  this.resultText = this.add.text(400, 350, '', { font: '24px Arial', fill: '#000' }).setOrigin(0.5);\n\n  // Listen for keyboard events (for answering binary questions)\n  this.input.keyboard.on('keydown', handleKeyPress, this);\n}\n\nfunction update() {\n  if (!questionActive) {\n    // --- Player movement logic ---\n    if (this.cursors.left.isDown) {\n      this.player.setVelocityX(-160);\n    } else if (this.cursors.right.isDown) {\n      this.player.setVelocityX(160);\n    } else {\n      this.player.setVelocityX(0);\n    }\n    if (this.cursors.up.isDown && this.player.body.touching.down) {\n      this.player.setVelocityY(-330);\n    }\n\n    // --- Enemy patrol logic ---\n    this.enemies.getChildren().forEach(enemy => {\n      if (enemy.body.blocked.left) {\n        enemy.setVelocityX(Math.abs(enemy.body.velocity.x));\n      } else if (enemy.body.blocked.right) {\n        enemy.setVelocityX(-Math.abs(enemy.body.velocity.x));\n      }\n    });\n\n    // --- Level progression logic ---\n    // If the player reaches near the top of the screen, advance to the next level.\n    if (this.player.y < 50) {\n      nextLevel(this);\n    }\n  }\n}\n\n// This function is called when an enemy hits the player.\nfunction onEnemyHit(player, enemy) {\n  // Check if we're already in cooldown\n  if (hitCooldown || questionActive) {\n    return;\n  }\n  \n  // Set the cooldown flag\n  hitCooldown = true;\n  \n  // Trigger the question routine.\n  questionActive = true;\n  // Pause the physics to \"freeze\" the game during the question.\n  this.physics.pause();\n  generateBinaryQuestion(this);\n  \n  // Set a timer to remove the cooldown after 2 seconds (2000 milliseconds).\n  this.time.delayedCall(2000, () => {\n    hitCooldown = false;\n  });\n}\n\n// This function generates and displays a binary multiplication question.\nfunction generateBinaryQuestion(scene) {\n  // Generate two random numbers (1 to 15) and convert them to binary strings.\n  const a = Phaser.Math.Between(1, 15);\n  const b = Phaser.Math.Between(1, 15);\n  const aBinary = a.toString(2);\n  const bBinary = b.toString(2);\n  correctAnswer = a * b;\n\n  // Display the question in the center of the screen.\n  questionText = scene.add.text(\n    400,\n    200,\n    `What is ${aBinary} * ${bBinary} in binary?`,\n    { font: '24px Arial', fill: '#000' }\n  ).setOrigin(0.5);\n\n  // Create three answer options: the correct answer, one more, and one less.\n  currentAnswers = [\n    correctAnswer.toString(2),\n    (correctAnswer + 1).toString(2),\n    (correctAnswer - 1).toString(2)\n  ];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n\n  // Display the answer options.\n  answerTexts = [];\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let optionText = scene.add.text(\n      400,\n      250 + i * 40,\n      `${i + 1}: ${currentAnswers[i]}`,\n      { font: '24px Arial', fill: '#000' }\n    ).setOrigin(0.5);\n    answerTexts.push(optionText);\n  }\n}\n\n// This function handles key presses for answering the question.\nfunction handleKeyPress(event) {\n  // Only process input if a question is active.\n  if (!questionActive) {\n    return;\n  }\n  // Check if the pressed key is '1', '2', or '3'.\n  const keyIndex = parseInt(event.key) - 1;\n  if (keyIndex >= 0 && keyIndex < currentAnswers.length) {\n    // Convert the chosen binary answer to an integer.\n    const selectedAnswer = parseInt(currentAnswers[keyIndex], 2);\n    if (selectedAnswer === correctAnswer) {\n      // Correct answer.\n      this.resultText.setText('Correct!');\n      score += 10;\n      scoreText.setText('Score: ' + score);\n      setTimeout(() => {\n        resetQuestion(this);\n      }, 500);\n    } else {\n      // Incorrect answer.\n      this.resultText.setText('Incorrect, try again!');\n      mistakes.push(`Mistake: Selected ${currentAnswers[keyIndex]} instead of ${correctAnswer.toString(2)}`);\n      console.log(mistakes);\n      // Reset the question after a short delay to allow another try.\n      setTimeout(() => {\n        resetQuestion(this);\n      }, 500);\n    }\n  }\n}\n\n// This function removes the question UI and resumes the game.\nfunction resetQuestion(scene) {\n  if (questionText) {\n    questionText.destroy();\n  }\n  answerTexts.forEach(text => text.destroy());\n  scene.resultText.setText('');\n  questionActive = false;\n  // Resume physics so the game continues.\n  scene.physics.resume();\n}\n\n// This function advances the game to the next level.\nfunction nextLevel(scene) {\n  // Increase the level counter and update the display.\n  level++;\n  levelText.setText('Level: ' + level);\n  \n  // Optionally, add a new enemy to increase the challenge.\n  let newEnemyX = Phaser.Math.Between(50, 750);\n  let newEnemyY = Phaser.Math.Between(50, 300);\n  let newEnemy = scene.enemies.create(newEnemyX, newEnemyY, 'enemy');\n  newEnemy.setBounce(1);\n  newEnemy.setCollideWorldBounds(true);\n  // Set a random horizontal velocity between 100 and 150 (with a random direction).\n  let velocityX = Phaser.Math.Between(100, 150);\n  if (Phaser.Math.Between(0, 1)) {\n    velocityX = -velocityX;\n  }\n  newEnemy.setVelocityX(velocityX);\n\n  // Reset the player's position to the bottom of the screen.\n  scene.player.setPosition(100, 450);\n}\n",
      "timestamp": "2025-02-04T12:28:39.199Z",
      "totalPoints": 0
    },
    {
      "id": "31b221ca-2ae5-42d2-b135-600abd18fe45",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#f5f5f5',\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global variables for our simulation\nlet processes = []; // Array of waiting processes\nlet nextProcessId = 1;\nlet score = 0;\nlet scoreText;\nlet instructionText;\nlet cpuText;\nlet processGroup;\n\nfunction preload() {\n  // No external assets in this demo.\n}\n\nfunction create() {\n  // Create a group to hold process display objects.\n  processGroup = this.add.group();\n\n  // Display score and instructions.\n  scoreText = this.add.text(16, 16, 'Score: 0', { font: '20px Arial', fill: '#000' });\n  instructionText = this.add.text(\n    16,\n    50,\n    'Select the process with the shortest burst time (SJF) by pressing 1, 2, 3, ...',\n    { font: '16px Arial', fill: '#000' }\n  );\n  \n  // Display CPU area in the middle.\n  cpuText = this.add.text(400, 300, 'CPU Idle', { font: '24px Arial', fill: '#d32f2f' }).setOrigin(0.5);\n\n  // Generate the initial waiting queue of processes.\n  generateProcesses(this);\n\n  // Listen for keyboard events (number keys for selection).\n  this.input.keyboard.on('keydown', handleKey, this);\n}\n\nfunction update() {\n  // In this simulation, our logic is event-driven (no per-frame updates needed).\n}\n\n/**\n * Generates a new set of processes with random burst times.\n * Each process is represented as an object with an id and burstTime.\n * The processes are displayed as rectangles with labels.\n */\nfunction generateProcesses(scene) {\n  // Clear any existing process display objects.\n  processGroup.clear(true, true);\n  processes = [];\n  \n  // Generate between 3 and 5 processes.\n  const numProcesses = Phaser.Math.Between(3, 5);\n  for (let i = 0; i < numProcesses; i++) {\n    const burst = Phaser.Math.Between(2, 10);\n    let proc = {\n      id: nextProcessId++,\n      burstTime: burst\n    };\n    processes.push(proc);\n  }\n  \n  // Sort processes by id (so the order of display is consistent).\n  processes.sort((a, b) => a.id - b.id);\n\n  // Display each process in a \"waiting queue\" area.\n  for (let i = 0; i < processes.length; i++) {\n    let proc = processes[i];\n    // Set a display position for the process.\n    let x = 100 + i * 150;\n    let y = 100;\n    \n    // Draw a rectangle to represent the process.\n    let rect = scene.add.rectangle(x, y, 120, 80, 0x90caf9).setOrigin(0.5);\n    // Add text inside the rectangle with process id and burst time.\n    let text = scene.add.text(x, y, `P${proc.id}\\nBurst: ${proc.burstTime}`, {\n      font: '20px Arial',\n      fill: '#000',\n      align: 'center'\n    }).setOrigin(0.5);\n    // Add an index label (for selection via number keys) near the rectangle.\n    let indexText = scene.add.text(x - 50, y - 30, `${i + 1}`, {\n      font: '24px Arial',\n      fill: '#d32f2f'\n    });\n    \n    // Save references to these display objects in the process object.\n    proc.rect = rect;\n    proc.text = text;\n    proc.indexText = indexText;\n    \n    // Add these objects to the group.\n    processGroup.addMultiple([rect, text, indexText]);\n  }\n}\n\n/**\n * Handles keyboard input.\n * When the player presses a number key, the corresponding process in the waiting queue is selected.\n * The correct process is the one with the smallest burst time.\n */\nfunction handleKey(event) {\n  // Convert the pressed key to an index (assuming keys \"1\", \"2\", \"3\", etc.).\n  let index = parseInt(event.key) - 1;\n  if (isNaN(index)) return;\n  if (index < 0 || index >= processes.length) return;\n\n  // Determine the correct process (one with the shortest burst time).\n  let correctProcess = processes.reduce((prev, curr) => (curr.burstTime < prev.burstTime ? curr : prev), processes[0]);\n  \n  let selectedProcess = processes[index];\n\n  if (selectedProcess === correctProcess) {\n    // Correct selection: simulate the process running in the CPU.\n    cpuText.setText(`CPU Running P${selectedProcess.id}`);\n    score += 10;\n    scoreText.setText('Score: ' + score);\n\n    // Remove the selected process's display objects with a small delay.\n    selectedProcess.rect.destroy();\n    selectedProcess.text.destroy();\n    selectedProcess.indexText.destroy();\n\n    // Remove it from the waiting queue array.\n    processes.splice(index, 1);\n\n    // Simulate the process run time (1 second delay).\n    this.time.delayedCall(1000, () => {\n      cpuText.setText('CPU Idle');\n      // If no processes remain, generate a new batch.\n      if (processes.length === 0) {\n        generateProcesses(this);\n      } else {\n        // Re-label and re-position the remaining processes for clarity.\n        for (let i = 0; i < processes.length; i++) {\n          processes[i].indexText.setText(`${i + 1}`);\n          let newX = 100 + i * 150;\n          processes[i].rect.x = newX;\n          processes[i].text.x = newX;\n          processes[i].indexText.x = newX - 50;\n        }\n      }\n    }, [], this);\n  } else {\n    // Incorrect selection: show an error message.\n    cpuText.setText('Incorrect! Try Again.');\n    this.time.delayedCall(1000, () => {\n      cpuText.setText('CPU Idle');\n    }, [], this);\n  }\n}\n",
      "timestamp": "2025-02-04T12:30:33.035Z",
      "totalPoints": 0
    },
    {
      "id": "4e300291-3f3d-479a-8696-777966ec140c",
      "name": "Binary Multiplication Game",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#e8f5e9',\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global variables for the IEEE754 Quest\nlet currentAnswers = [];\nlet correctAnswer = '';\nlet questionActive = false;\nlet questionText;\nlet answerTexts = [];\nlet score = 0;\nlet scoreText;\nlet currentNumber = 0;\n\nfunction preload() {\n  // No external assets are needed.\n}\n\nfunction create() {\n  // Display the current score.\n  scoreText = this.add.text(16, 16, 'Score: 0', { font: '20px Arial', fill: '#000' });\n\n  // Create the question text (centered near the top).\n  questionText = this.add.text(400, 150, '', { font: '24px Arial', fill: '#000' }).setOrigin(0.5);\n\n  // Listen for number key inputs (for selecting the answer options).\n  this.input.keyboard.on('keydown', handleKey, this);\n\n  // Generate the first IEEE754 question.\n  generateIEEE754Question(this);\n}\n\nfunction update() {\n  // No per-frame logic is needed; this game is event-driven.\n}\n\n/**\n * Generates a new question by picking a random float, converting it to IEEE754,\n * generating two distractors by altering one random bit, shuffling the options,\n * and then displaying the question and answers.\n */\nfunction generateIEEE754Question(scene) {\n  // Generate a random float between -50 and 50 (rounded to 2 decimals).\n  currentNumber = Phaser.Math.FloatBetween(-50, 50);\n  currentNumber = parseFloat(currentNumber.toFixed(2));\n\n  // Compute the correct IEEE754 (32-bit) representation.\n  correctAnswer = floatToIEEE754(currentNumber);\n\n  // Create two distractors by flipping a random bit in the correct answer.\n  let distractor1 = alterBit(correctAnswer);\n  let distractor2 = alterBit(correctAnswer);\n\n  // Ensure that the distractors differ from the correct answer and from each other.\n  while (distractor1 === correctAnswer) {\n    distractor1 = alterBit(correctAnswer);\n  }\n  while (distractor2 === correctAnswer || distractor2 === distractor1) {\n    distractor2 = alterBit(correctAnswer);\n  }\n\n  // Create an array of answer options and shuffle them.\n  currentAnswers = [correctAnswer, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n\n  // Update the question text.\n  questionText.setText(`Convert ${currentNumber} to IEEE754 (32-bit):`);\n\n  // Remove any previous answer texts.\n  if (answerTexts.length > 0) {\n    answerTexts.forEach(text => text.destroy());\n    answerTexts = [];\n  }\n\n  // Display the answer options (with labels 1, 2, 3).\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let option = scene.add.text(400, 250 + i * 50, `${i + 1}: ${currentAnswers[i]}`, {\n      font: '20px Arial',\n      fill: '#000'\n    }).setOrigin(0.5);\n    answerTexts.push(option);\n  }\n\n  questionActive = true;\n}\n\n/**\n * Handles number key presses.\n * If the correct answer is chosen, the score increases; otherwise, a message is shown.\n * After a short delay, a new question is generated.\n */\nfunction handleKey(event) {\n  if (!questionActive) return;\n\n  // Convert the key to an index (assuming keys \"1\", \"2\", \"3\", etc.).\n  const index = parseInt(event.key) - 1;\n  if (index < 0 || index >= currentAnswers.length) return;\n\n  const selectedAnswer = currentAnswers[index];\n\n  if (selectedAnswer === correctAnswer) {\n    score += 10;\n    scoreText.setText('Score: ' + score);\n    questionText.setText('Correct!');\n  } else {\n    questionText.setText('Incorrect!');\n  }\n\n  questionActive = false;\n  // Wait 1 second, then generate a new question.\n  this.time.delayedCall(1000, () => {\n    generateIEEE754Question(this);\n  }, [], this);\n}\n\n/**\n * Converts a floating-point number to its IEEE754 32-bit binary representation.\n * Uses a Float32Array and a Uint32Array to extract the underlying bits.\n */\nfunction floatToIEEE754(num) {\n  let f32 = new Float32Array(1);\n  f32[0] = num;\n  let u32 = new Uint32Array(f32.buffer);\n  // Convert to a binary string, padded to 32 bits.\n  return u32[0].toString(2).padStart(32, '0');\n}\n\n/**\n * Flips a random bit in a 32-bit binary string.\n * This function returns a new string with one bit toggled.\n */\nfunction alterBit(binaryStr) {\n  // Pick a random index between 0 and 31.\n  const index = Phaser.Math.Between(0, 31);\n  // Determine the new bit value.\n  const newBit = binaryStr[index] === '0' ? '1' : '0';\n  // Return the string with the bit at the selected index flipped.\n  return binaryStr.substr(0, index) + newBit + binaryStr.substr(index + 1);\n}\n",
      "timestamp": "2025-02-04T12:39:21.209Z",
      "totalPoints": 0
    },
    {
      "id": "4f47db72-8123-4b53-b97f-e1ff0adde04a",
      "name": "IEEE754",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#a7ffeb',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 500 },\n      debug: false\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global state variables\nlet mode = \"exploration\"; // \"exploration\" or \"puzzle\"\nlet puzzleStage = 0;      // 1 = door lock puzzle, 2 = safe puzzle\nlet doorLockSolved = false;\nlet safeSolved = false;\nlet score = 0;\n\n// Exploration objects\nlet player, doorLock, safe, ground;\nlet cursors, interactKey;\n\n// UI texts (common to both modes)\nlet scoreText, narrativeText;\nlet optionTexts = [];\n\n// Puzzle variables for Lock 1 (Door Lock: 2's Complement)\nlet lock1Number;   // random negative integer between -128 and -1\nlet lock1Correct;  // its correct 8-bit 2's complement representation\n\n// Puzzle variables for Lock 2 (Safe Lock: Division Puzzle)\nlet ieee754Str;     // IEEE754 32-bit representation (of a random positive float)\nlet ieee754Value;   // the decoded float value (for display clarity)\nlet divisionResult; // result of lock1Number / ieee754Value (rounded to 2 decimals)\nlet currentAnswers = []; // answer options for the current puzzle\n\nfunction preload() {\n  // Create simple textures using graphics\n  this.graphics = this.add.graphics();\n  \n  // Player texture: a blue square\n  this.graphics.fillStyle(0x2196f3, 1);\n  this.graphics.fillRect(0, 0, 32, 32);\n  this.graphics.generateTexture('player', 32, 32);\n  this.graphics.clear();\n  \n  // Door lock texture: a brown rectangle\n  this.graphics.fillStyle(0x6d4c41, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('doorLock', 48, 48);\n  this.graphics.clear();\n  \n  // Safe texture: a dark gray square\n  this.graphics.fillStyle(0x424242, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('safe', 48, 48);\n  this.graphics.clear();\n}\n\nfunction create() {\n  // --- Create the Landscape ---\n  // Create ground as a static physics body.\n  ground = this.physics.add.staticGroup();\n  ground.create(400, 580, 'safe').setScale(16, 0.5).refreshBody(); // Using safe texture as a simple rectangle\n  \n  // Create player sprite\n  player = this.physics.add.sprite(100, 500, 'player');\n  player.setCollideWorldBounds(true);\n  \n  // Enable collisions with ground.\n  this.physics.add.collider(player, ground);\n  \n  // Create door lock object (if not solved yet)\n  doorLock = this.physics.add.staticSprite(150, 520, 'doorLock');\n  \n  // Create safe object (will be available after door lock is solved)\n  safe = this.physics.add.staticSprite(650, 520, 'safe');\n  safe.visible = false; // hide safe until door lock is solved\n  \n  // Create UI texts.\n  scoreText = this.add.text(16, 16, 'Score: 0', { font: '20px Arial', fill: '#000' });\n  narrativeText = this.add.text(400, 50, 'Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.', \n    { font: '20px Arial', fill: '#000', align: 'center' }).setOrigin(0.5);\n  \n  // Set up input keys.\n  cursors = this.input.keyboard.createCursorKeys();\n  interactKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);\n  // Also listen for number keys for puzzle answers.\n  this.input.keyboard.on('keydown', handleKey, this);\n}\n\nfunction update() {\n  if (mode === \"exploration\") {\n    // --- Player Movement ---\n    player.setVelocityX(0);\n    if (cursors.left.isDown) {\n      player.setVelocityX(-160);\n    } else if (cursors.right.isDown) {\n      player.setVelocityX(160);\n    }\n    if (cursors.up.isDown && player.body.touching.down) {\n      player.setVelocityY(-330);\n    }\n    \n    // --- Interaction Check ---\n    // Check if player is near door lock (and door lock not yet solved).\n    if (!doorLockSolved && Phaser.Math.Distance.Between(player.x, player.y, doorLock.x, doorLock.y) < 70) {\n      narrativeText.setText('Press E to interact with the Door Lock.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(1, this);\n      }\n    }\n    // Check if door lock is solved and safe is available.\n    else if (doorLockSolved && !safeSolved && Phaser.Math.Distance.Between(player.x, player.y, safe.x, safe.y) < 70) {\n      narrativeText.setText('Press E to interact with the Safe.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(2, this);\n      }\n    }\n    else {\n      narrativeText.setText('Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.');\n    }\n  }\n  // When in puzzle mode, movement is disabled.\n}\n\n/* ---------------------------\n   Puzzle Mode Starter\n--------------------------- */\nfunction startPuzzle(stage, scene) {\n  mode = \"puzzle\";\n  puzzleStage = stage;\n  \n  // Hide exploration objects\n  player.visible = false;\n  doorLock.visible = false;\n  safe.visible = false;\n  \n  // Clear any previous puzzle options.\n  clearOptions();\n  \n  if (stage === 1) {\n    setupLock1(scene);\n  } else if (stage === 2) {\n    setupLock2(scene);\n  }\n}\n\n/* ---------------------------\n   LOCK 1: Door Lock Puzzle\n   ---------------------------\n   Convert a negative decimal (lock1Number) to its 8-bit 2's complement.\n*/\nfunction setupLock1(scene) {\n  // Generate a random negative integer between -128 and -1.\n  lock1Number = Phaser.Math.Between(-128, -1);\n  // Compute its 8-bit 2's complement.\n  let twosValue = 256 + lock1Number;\n  lock1Correct = twosValue.toString(2).padStart(8, '0');\n  \n  // Generate two distractors by flipping a random bit.\n  let distractor1 = alterBit(lock1Correct);\n  let distractor2 = alterBit(lock1Correct);\n  while (distractor1 === lock1Correct) {\n    distractor1 = alterBit(lock1Correct);\n  }\n  while (distractor2 === lock1Correct || distractor2 === distractor1) {\n    distractor2 = alterBit(lock1Correct);\n  }\n  \n  currentAnswers = [lock1Correct, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Door Lock Challenge:\\n\\n` +\n    `A panel displays the decimal number:\\n  ${lock1Number}\\n\\n` +\n    `Convert it to its 8-bit 2's complement representation.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   LOCK 2: Safe Lock Puzzle\n   ---------------------------\n   Divide the door lock number (lock1Number) by a positive number decoded from an IEEE754 binary string.\n*/\nfunction setupLock2(scene) {\n  // Generate a random positive float between 1 and 20.\n  let randomFloat = Phaser.Math.FloatBetween(1, 20);\n  randomFloat = parseFloat(randomFloat.toFixed(2));\n  \n  // Convert it to IEEE754 32-bit binary representation.\n  ieee754Str = floatToIEEE754(randomFloat);\n  ieee754Value = randomFloat;\n  \n  // Compute the division: (lock1Number) divided by (randomFloat).\n  divisionResult = (lock1Number / randomFloat).toFixed(2);\n  \n  // Create two distractors by adding/subtracting a small random offset.\n  let offset1 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let offset2 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let distractor1 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset1 : -offset1)).toFixed(2);\n  let distractor2 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset2 : -offset2)).toFixed(2);\n  \n  if (distractor1 === divisionResult) distractor1 = (parseFloat(divisionResult) + 0.1).toFixed(2);\n  if (distractor2 === divisionResult || distractor2 === distractor1) distractor2 = (parseFloat(divisionResult) - 0.1).toFixed(2);\n  \n  currentAnswers = [divisionResult, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Safe Challenge:\\n\\n` +\n    `The safe displays an IEEE754 32-bit binary string:\\n  ${ieee754Str}\\n\\n` +\n    `This represents the number: ${ieee754Value}\\n` +\n    `Now, divide the door lock number (${lock1Number}) by this number.\\n` +\n    `Provide the result (rounded to two decimals) to open the safe.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   Display Puzzle Options\n--------------------------- */\nfunction displayOptions(scene) {\n  // Create option texts for the currentAnswers array.\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let opt = scene.add.text(400, 250 + i * 60, `${i + 1}: ${currentAnswers[i]}`, {\n      font: '22px Arial',\n      fill: '#3e2723'\n    }).setOrigin(0.5);\n    optionTexts.push(opt);\n  }\n}\n\n/* ---------------------------\n   Input Handler for Puzzle Answers\n--------------------------- */\nfunction handleKey(event) {\n  // Only process number keys when in puzzle mode.\n  if (mode !== \"puzzle\") return;\n  \n  let index = parseInt(event.key) - 1;\n  if (isNaN(index) || index < 0 || index >= currentAnswers.length) return;\n  \n  if (puzzleStage === 1) {\n    // Door lock puzzle\n    if (currentAnswers[index] === lock1Correct) {\n      score += 10;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The door lock clicks open!\\nPreparing to return to the world...\");\n      clearOptions();\n      // Delay a moment before returning to exploration mode.\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        doorLockSolved = true;\n        mode = \"exploration\";\n        // Reveal the safe now that door lock is solved.\n        safe.visible = true;\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nThe door lock is open.');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect 2's complement!\\nTry again.\");\n    }\n  }\n  else if (puzzleStage === 2) {\n    // Safe puzzle\n    if (currentAnswers[index] === divisionResult) {\n      score += 20;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The safe unlocks with a satisfying click!\\nCongratulations, you've completed the heist!\");\n      clearOptions();\n      safeSolved = true;\n      // End the game or return to exploration mode.\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        mode = \"exploration\";\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nAll locks are open!');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect division result!\\nRecheck your calculation.\");\n    }\n  }\n}\n\n/* ---------------------------\n   Utility Functions\n--------------------------- */\n\n/**\n * Clears the puzzle option texts.\n */\nfunction clearOptions() {\n  optionTexts.forEach(opt => opt.destroy());\n  optionTexts = [];\n}\n\n/**\n * Converts a float to its IEEE754 32-bit binary representation.\n */\nfunction floatToIEEE754(num) {\n  let f32 = new Float32Array(1);\n  f32[0] = num;\n  let u32 = new Uint32Array(f32.buffer);\n  return u32[0].toString(2).padStart(32, '0');\n}\n\n/**\n * Flips one random bit in a binary string.\n */\nfunction alterBit(binaryStr) {\n  const index = Phaser.Math.Between(0, binaryStr.length - 1);\n  const newBit = binaryStr[index] === '0' ? '1' : '0';\n  return binaryStr.substring(0, index) + newBit + binaryStr.substring(index + 1);\n}\n",
      "timestamp": "2025-02-04T12:49:35.008Z",
      "totalPoints": 0
    },
    {
      "id": "f171f374-976e-4039-ae0d-a047709dbd94",
      "name": "IEEE754",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#a7ffeb',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 500 },\n      debug: false\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global state variables\nlet mode = \"exploration\"; // \"exploration\" or \"puzzle\"\nlet puzzleStage = 0;      // 1 = door lock puzzle, 2 = safe puzzle\nlet doorLockSolved = false;\nlet safeSolved = false;\nlet score = 0;\n\n// Exploration objects\nlet player, doorLock, safe, ground;\nlet cursors, interactKey;\n\n// UI texts (common to both modes)\nlet scoreText, narrativeText;\nlet optionTexts = [];\n\n// Puzzle variables for Lock 1 (Door Lock: 2's Complement)\nlet lock1Number;   // random negative integer between -128 and -1\nlet lock1Correct;  // its correct 8-bit 2's complement representation\n\n// Puzzle variables for Lock 2 (Safe Lock: Division Puzzle)\nlet ieee754Str;     // IEEE754 32-bit representation (of a random positive float)\nlet ieee754Value;   // the decoded float value (for display clarity)\nlet divisionResult; // result of lock1Number / ieee754Value (rounded to 2 decimals)\nlet currentAnswers = []; // answer options for the current puzzle\n\nfunction preload() {\n  // Create simple textures using graphics\n  this.graphics = this.add.graphics();\n  \n  // Player texture: a blue square\n  this.graphics.fillStyle(0x2196f3, 1);\n  this.graphics.fillRect(0, 0, 32, 32);\n  this.graphics.generateTexture('player', 32, 32);\n  this.graphics.clear();\n  \n  // Door lock texture: a brown rectangle\n  this.graphics.fillStyle(0x6d4c41, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('doorLock', 48, 48);\n  this.graphics.clear();\n  \n  // Safe texture: a dark gray square\n  this.graphics.fillStyle(0x424242, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('safe', 48, 48);\n  this.graphics.clear();\n}\n\nfunction create() {\n  // --- Create the Landscape ---\n  // Create ground as a static physics body.\n  ground = this.physics.add.staticGroup();\n  // Here we use the safe texture to create a simple ground rectangle.\n  ground.create(400, 580, 'safe').setScale(16, 0.5).refreshBody();\n  \n  // Create player sprite\n  player = this.physics.add.sprite(100, 500, 'player');\n  player.setCollideWorldBounds(true);\n  \n  // Enable collisions with ground.\n  this.physics.add.collider(player, ground);\n  \n  // Create door lock object (if not solved yet)\n  doorLock = this.physics.add.staticSprite(150, 520, 'doorLock');\n  \n  // Create safe object (will be available after door lock is solved)\n  safe = this.physics.add.staticSprite(650, 520, 'safe');\n  safe.visible = false; // hide safe until door lock is solved\n  \n  // Create UI texts.\n  scoreText = this.add.text(16, 16, 'Score: 0', { font: '20px Arial', fill: '#000' });\n  narrativeText = this.add.text(400, 50, 'Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.', \n    { font: '20px Arial', fill: '#000', align: 'center' }).setOrigin(0.5);\n  \n  // Set up input keys.\n  cursors = this.input.keyboard.createCursorKeys();\n  interactKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);\n  // Also listen for number keys for puzzle answers.\n  this.input.keyboard.on('keydown', handleKey, this);\n}\n\nfunction update() {\n  if (mode === \"exploration\") {\n    // --- Player Movement ---\n    player.setVelocityX(0);\n    if (cursors.left.isDown) {\n      player.setVelocityX(-160);\n    } else if (cursors.right.isDown) {\n      player.setVelocityX(160);\n    }\n    if (cursors.up.isDown && player.body.touching.down) {\n      player.setVelocityY(-330);\n    }\n    \n    // --- Interaction Check ---\n    // Check if player is near door lock (and door lock not yet solved).\n    if (!doorLockSolved && Phaser.Math.Distance.Between(player.x, player.y, doorLock.x, doorLock.y) < 70) {\n      narrativeText.setText('Press E to interact with the Door Lock.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(1, this);\n      }\n    }\n    // Check if door lock is solved and safe is available.\n    else if (doorLockSolved && !safeSolved && Phaser.Math.Distance.Between(player.x, player.y, safe.x, safe.y) < 70) {\n      narrativeText.setText('Press E to interact with the Safe.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(2, this);\n      }\n    }\n    else {\n      narrativeText.setText('Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.');\n    }\n  }\n  // In puzzle mode, player movement is disabled.\n}\n\n/* ---------------------------\n   Puzzle Mode Starter\n--------------------------- */\nfunction startPuzzle(stage, scene) {\n  mode = \"puzzle\";\n  puzzleStage = stage;\n  \n  // Hide exploration objects.\n  player.visible = false;\n  doorLock.visible = false;\n  safe.visible = false;\n  \n  // Clear any previous puzzle options.\n  clearOptions();\n  \n  if (stage === 1) {\n    setupLock1(scene);\n  } else if (stage === 2) {\n    setupLock2(scene);\n  }\n}\n\n/* ---------------------------\n   LOCK 1: Door Lock Puzzle\n   ---------------------------\n   Convert a negative decimal (lock1Number) to its 8-bit 2's complement.\n   This version uses the explicit invert-and-add-1 method implemented via bitwise operators.\n*/\nfunction setupLock1(scene) {\n  // Generate a random negative integer between -128 and -1.\n  lock1Number = Phaser.Math.Between(-128, -1);\n  // Compute its 8-bit 2's complement using our new bitwise method.\n  lock1Correct = computeTwosComplement(lock1Number);\n  \n  // Generate two distractors by flipping one random bit.\n  let distractor1 = alterBit(lock1Correct);\n  let distractor2 = alterBit(lock1Correct);\n  while (distractor1 === lock1Correct) {\n    distractor1 = alterBit(lock1Correct);\n  }\n  while (distractor2 === lock1Correct || distractor2 === distractor1) {\n    distractor2 = alterBit(lock1Correct);\n  }\n  \n  currentAnswers = [lock1Correct, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Door Lock Challenge:\\n\\n` +\n    `A panel displays the decimal number:\\n  ${lock1Number}\\n\\n` +\n    `Convert it to its 8-bit 2's complement representation.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   LOCK 2: Safe Lock Puzzle\n   ---------------------------\n   Divide the door lock number (lock1Number) by a positive number decoded from an IEEE754 binary string.\n*/\nfunction setupLock2(scene) {\n  // Generate a random positive float between 1 and 20.\n  let randomFloat = Phaser.Math.FloatBetween(1, 20);\n  randomFloat = parseFloat(randomFloat.toFixed(2));\n  \n  // Convert it to IEEE754 32-bit binary representation.\n  ieee754Str = floatToIEEE754(randomFloat);\n  ieee754Value = randomFloat;\n  \n  // Compute the division: (lock1Number) divided by (randomFloat).\n  divisionResult = (lock1Number / randomFloat).toFixed(2);\n  \n  // Create two distractors by adding/subtracting a small random offset.\n  let offset1 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let offset2 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let distractor1 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset1 : -offset1)).toFixed(2);\n  let distractor2 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset2 : -offset2)).toFixed(2);\n  \n  if (distractor1 === divisionResult) distractor1 = (parseFloat(divisionResult) + 0.1).toFixed(2);\n  if (distractor2 === divisionResult || distractor2 === distractor1) distractor2 = (parseFloat(divisionResult) - 0.1).toFixed(2);\n  \n  currentAnswers = [divisionResult, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Safe Challenge:\\n\\n` +\n    `The safe displays an IEEE754 32-bit binary string:\\n  ${ieee754Str}\\n\\n` +\n    `This represents the number: ${ieee754Value}\\n` +\n    `Now, divide the door lock number (${lock1Number}) by this number.\\n` +\n    `Provide the result (rounded to two decimals) to open the safe.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   Display Puzzle Options\n--------------------------- */\nfunction displayOptions(scene) {\n  // Create option texts for the currentAnswers array.\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let opt = scene.add.text(400, 250 + i * 60, `${i + 1}: ${currentAnswers[i]}`, {\n      font: '22px Arial',\n      fill: '#3e2723'\n    }).setOrigin(0.5);\n    optionTexts.push(opt);\n  }\n}\n\n/* ---------------------------\n   Input Handler for Puzzle Answers\n--------------------------- */\nfunction handleKey(event) {\n  // Only process number keys when in puzzle mode.\n  if (mode !== \"puzzle\") return;\n  \n  let index = parseInt(event.key) - 1;\n  if (isNaN(index) || index < 0 || index >= currentAnswers.length) return;\n  \n  if (puzzleStage === 1) {\n    // Door lock puzzle\n    if (currentAnswers[index] === lock1Correct) {\n      score += 10;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The door lock clicks open!\\nPreparing to return to the world...\");\n      clearOptions();\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        doorLockSolved = true;\n        mode = \"exploration\";\n        // Reveal the safe now that door lock is solved.\n        safe.visible = true;\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nThe door lock is open.');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect 2's complement!\\nTry again.\");\n    }\n  }\n  else if (puzzleStage === 2) {\n    // Safe puzzle\n    if (currentAnswers[index] === divisionResult) {\n      score += 20;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The safe unlocks with a satisfying click!\\nCongratulations, you've completed the heist!\");\n      clearOptions();\n      safeSolved = true;\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        mode = \"exploration\";\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nAll locks are open!');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect division result!\\nRecheck your calculation.\");\n    }\n  }\n}\n\n/* ---------------------------\n   Utility Functions\n--------------------------- */\n\n/**\n * Clears the puzzle option texts.\n */\nfunction clearOptions() {\n  optionTexts.forEach(opt => opt.destroy());\n  optionTexts = [];\n}\n\n/**\n * Converts a float to its IEEE754 32-bit binary representation.\n */\nfunction floatToIEEE754(num) {\n  let f32 = new Float32Array(1);\n  f32[0] = num;\n  let u32 = new Uint32Array(f32.buffer);\n  return u32[0].toString(2).padStart(32, '0');\n}\n\n/**\n * Flips one random bit in a binary string.\n */\nfunction alterBit(binaryStr) {\n  const index = Phaser.Math.Between(0, binaryStr.length - 1);\n  const newBit = binaryStr[index] === '0' ? '1' : '0';\n  return binaryStr.substring(0, index) + newBit + binaryStr.substring(index + 1);\n}\n\n/**\n * Computes the 8-bit two's complement representation of a signed number\n * using the \"invert and add 1\" method with bitwise operators.\n *\n * For n < 0:\n *   Uses ((~Math.abs(n) + 1) & 0xFF) to ensure the result fits in 8 bits.\n *\n * For n >= 0, simply returns the 8-bit binary string.\n */\nfunction computeTwosComplement(n) {\n  if (n >= 0) {\n    return n.toString(2).padStart(8, '0');\n  } else {\n    // Use bitwise operations to compute the 8-bit two's complement.\n    return ((~Math.abs(n) + 1) & 0xFF).toString(2).padStart(8, '0');\n  }\n}\n",
      "timestamp": "2025-02-04T13:24:28.516Z",
      "totalPoints": 0
    },
    {
      "id": "e3a647d6-a71a-41a0-92d6-7169fbe382ce",
      "name": "IEEE754",
      "code": "const config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  backgroundColor: '#a7ffeb',\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 500 },\n      debug: false\n    }\n  },\n  scene: {\n    preload,\n    create,\n    update\n  }\n};\n\nconst game = new Phaser.Game(config);\n\n// Global state variables\nlet mode = \"exploration\"; // \"exploration\" or \"puzzle\"\nlet puzzleStage = 0;      // 1 = door lock puzzle, 2 = safe puzzle\nlet doorLockSolved = false;\nlet safeSolved = false;\nlet score = 0;\n\n// Exploration objects\nlet player, doorLock, safe, ground;\nlet cursors, interactKey;\n\n// UI texts (common to both modes)\nlet scoreText, narrativeText;\nlet optionTexts = [];\n\n// Puzzle variables for Lock 1 (Door Lock: 2's Complement)\nlet lock1Number;   // random negative integer between -128 and -1\nlet lock1Correct;  // its correct 8-bit 2's complement representation\n\n// Puzzle variables for Lock 2 (Safe Lock: Division Puzzle)\nlet ieee754Str;     // IEEE754 32-bit representation (of a random positive float)\nlet ieee754Value;   // the decoded float value (for display clarity)\nlet divisionResult; // result of lock1Number / ieee754Value (rounded to 2 decimals)\nlet currentAnswers = []; // answer options for the current puzzle\n\nfunction preload() {\n  // Create simple textures using graphics\n  this.graphics = this.add.graphics();\n  \n  // Player texture: a blue square\n  this.graphics.fillStyle(0x2196f3, 1);\n  this.graphics.fillRect(0, 0, 32, 32);\n  this.graphics.generateTexture('player', 32, 32);\n  this.graphics.clear();\n  \n  // Door lock texture: a brown rectangle\n  this.graphics.fillStyle(0x6d4c41, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('doorLock', 48, 48);\n  this.graphics.clear();\n  \n  // Safe texture: a dark gray square\n  this.graphics.fillStyle(0x424242, 1);\n  this.graphics.fillRect(0, 0, 48, 48);\n  this.graphics.generateTexture('safe', 48, 48);\n  this.graphics.clear();\n}\n\nfunction create() {\n  // --- Create the Landscape ---\n  // Create ground as a static physics body.\n  ground = this.physics.add.staticGroup();\n  // Here we use the safe texture to create a simple ground rectangle.\n  ground.create(400, 580, 'safe').setScale(16, 0.5).refreshBody();\n  \n  // Create player sprite\n  player = this.physics.add.sprite(100, 500, 'player');\n  player.setCollideWorldBounds(true);\n  \n  // Enable collisions with ground.\n  this.physics.add.collider(player, ground);\n  \n  // Create door lock object (if not solved yet)\n  doorLock = this.physics.add.staticSprite(150, 520, 'doorLock');\n  \n  // Create safe object (will be available after door lock is solved)\n  safe = this.physics.add.staticSprite(650, 520, 'safe');\n  safe.visible = false; // hide safe until door lock is solved\n  \n  // Create UI texts.\n  scoreText = this.add.text(16, 16, 'Score: 0', { font: '20px Arial', fill: '#000' });\n  narrativeText = this.add.text(400, 50, 'Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.', \n    { font: '20px Arial', fill: '#000', align: 'center' }).setOrigin(0.5);\n  \n  // Set up input keys.\n  cursors = this.input.keyboard.createCursorKeys();\n  interactKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E);\n  // Also listen for number keys for puzzle answers.\n  this.input.keyboard.on('keydown', handleKey, this);\n}\n\nfunction update() {\n  if (mode === \"exploration\") {\n    // --- Player Movement ---\n    player.setVelocityX(0);\n    if (cursors.left.isDown) {\n      player.setVelocityX(-160);\n    } else if (cursors.right.isDown) {\n      player.setVelocityX(160);\n    }\n    if (cursors.up.isDown && player.body.touching.down) {\n      player.setVelocityY(-330);\n    }\n    \n    // --- Interaction Check ---\n    // Check if player is near door lock (and door lock not yet solved).\n    if (!doorLockSolved && Phaser.Math.Distance.Between(player.x, player.y, doorLock.x, doorLock.y) < 70) {\n      narrativeText.setText('Press E to interact with the Door Lock.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(1, this);\n      }\n    }\n    // Check if door lock is solved and safe is available.\n    else if (doorLockSolved && !safeSolved && Phaser.Math.Distance.Between(player.x, player.y, safe.x, safe.y) < 70) {\n      narrativeText.setText('Press E to interact with the Safe.');\n      if (Phaser.Input.Keyboard.JustDown(interactKey)) {\n        startPuzzle(2, this);\n      }\n    }\n    else {\n      narrativeText.setText('Explore the world.\\nUse arrow keys to move.\\nPress E to interact with nearby objects.');\n    }\n  }\n  // In puzzle mode, player movement is disabled.\n}\n\n/* ---------------------------\n   Puzzle Mode Starter\n--------------------------- */\nfunction startPuzzle(stage, scene) {\n  mode = \"puzzle\";\n  puzzleStage = stage;\n  \n  // Hide exploration objects.\n  player.visible = false;\n  doorLock.visible = false;\n  safe.visible = false;\n  \n  // Clear any previous puzzle options.\n  clearOptions();\n  \n  if (stage === 1) {\n    setupLock1(scene);\n  } else if (stage === 2) {\n    setupLock2(scene);\n  }\n}\n\n/* ---------------------------\n   LOCK 1: Door Lock Puzzle\n   ---------------------------\n   Convert a negative decimal (lock1Number) to its 8-bit 2's complement.\n   This version uses the explicit invert-and-add-1 method implemented via bitwise operators.\n*/\nfunction setupLock1(scene) {\n  // Generate a random negative integer between -128 and -1.\n  lock1Number = Phaser.Math.Between(-128, -1);\n  // Compute its 8-bit 2's complement using our new bitwise method.\n  lock1Correct = computeTwosComplement(lock1Number);\n  \n  // Generate two distractors by flipping one random bit.\n  let distractor1 = alterBit(lock1Correct);\n  let distractor2 = alterBit(lock1Correct);\n  while (distractor1 === lock1Correct) {\n    distractor1 = alterBit(lock1Correct);\n  }\n  while (distractor2 === lock1Correct || distractor2 === distractor1) {\n    distractor2 = alterBit(lock1Correct);\n  }\n  \n  currentAnswers = [lock1Correct, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Door Lock Challenge:\\n\\n` +\n    `A panel displays the decimal number:\\n  ${lock1Number}\\n\\n` +\n    `Convert it to its 8-bit 2's complement representation.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   LOCK 2: Safe Lock Puzzle\n   ---------------------------\n   Divide the door lock number (lock1Number) by a positive number decoded from an IEEE754 binary string.\n*/\nfunction setupLock2(scene) {\n  // Generate a random positive float between 1 and 20.\n  let randomFloat = Phaser.Math.FloatBetween(1, 20);\n  randomFloat = parseFloat(randomFloat.toFixed(2));\n  \n  // Convert it to IEEE754 32-bit binary representation.\n  ieee754Str = floatToIEEE754(randomFloat);\n  ieee754Value = randomFloat;\n  \n  // Compute the division: (lock1Number) divided by (randomFloat).\n  divisionResult = (lock1Number / randomFloat).toFixed(2);\n  \n  // Create two distractors by adding/subtracting a small random offset.\n  let offset1 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let offset2 = parseFloat(Phaser.Math.FloatBetween(0.1, 1).toFixed(2));\n  let distractor1 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset1 : -offset1)).toFixed(2);\n  let distractor2 = (parseFloat(divisionResult) + (Math.random() < 0.5 ? offset2 : -offset2)).toFixed(2);\n  \n  if (distractor1 === divisionResult) distractor1 = (parseFloat(divisionResult) + 0.1).toFixed(2);\n  if (distractor2 === divisionResult || distractor2 === distractor1) distractor2 = (parseFloat(divisionResult) - 0.1).toFixed(2);\n  \n  currentAnswers = [divisionResult, distractor1, distractor2];\n  Phaser.Utils.Array.Shuffle(currentAnswers);\n  \n  narrativeText.setText(\n    `Safe Challenge:\\n\\n` +\n    `The safe displays an IEEE754 32-bit binary string:\\n  ${ieee754Str}\\n\\n` +\n    `This represents the number: ${ieee754Value}\\n` +\n    `Now, divide the door lock number (${lock1Number}) by this number.\\n` +\n    `Provide the result (rounded to two decimals) to open the safe.`\n  );\n  \n  displayOptions(scene);\n}\n\n/* ---------------------------\n   Display Puzzle Options\n--------------------------- */\nfunction displayOptions(scene) {\n  // Create option texts for the currentAnswers array.\n  for (let i = 0; i < currentAnswers.length; i++) {\n    let opt = scene.add.text(400, 250 + i * 60, `${i + 1}: ${currentAnswers[i]}`, {\n      font: '22px Arial',\n      fill: '#3e2723'\n    }).setOrigin(0.5);\n    optionTexts.push(opt);\n  }\n}\n\n/* ---------------------------\n   Input Handler for Puzzle Answers\n--------------------------- */\nfunction handleKey(event) {\n  // Only process number keys when in puzzle mode.\n  if (mode !== \"puzzle\") return;\n  \n  let index = parseInt(event.key) - 1;\n  if (isNaN(index) || index < 0 || index >= currentAnswers.length) return;\n  \n  if (puzzleStage === 1) {\n    // Door lock puzzle\n    if (currentAnswers[index] === lock1Correct) {\n      score += 10;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The door lock clicks open!\\nPreparing to return to the world...\");\n      clearOptions();\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        doorLockSolved = true;\n        mode = \"exploration\";\n        // Reveal the safe now that door lock is solved.\n        safe.visible = true;\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nThe door lock is open.');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect 2's complement!\\nTry again.\");\n    }\n  }\n  else if (puzzleStage === 2) {\n    // Safe puzzle\n    if (currentAnswers[index] === divisionResult) {\n      score += 20;\n      scoreText.setText('Score: ' + score);\n      narrativeText.setText(\"The safe unlocks with a satisfying click!\\nCongratulations, you've completed the heist!\");\n      clearOptions();\n      safeSolved = true;\n      game.scene.scenes[0].time.delayedCall(1500, () => {\n        mode = \"exploration\";\n        player.visible = true;\n        narrativeText.setText('Explore the world.\\nAll locks are open!');\n      });\n    } else {\n      narrativeText.setText(\"Incorrect division result!\\nRecheck your calculation.\");\n    }\n  }\n}\n\n/* ---------------------------\n   Utility Functions\n--------------------------- */\n\n/**\n * Clears the puzzle option texts.\n */\nfunction clearOptions() {\n  optionTexts.forEach(opt => opt.destroy());\n  optionTexts = [];\n}\n\n/**\n * Converts a float to its IEEE754 32-bit binary representation.\n */\nfunction floatToIEEE754(num) {\n  let f32 = new Float32Array(1);\n  f32[0] = num;\n  let u32 = new Uint32Array(f32.buffer);\n  return u32[0].toString(2).padStart(32, '0');\n}\n\n/**\n * Flips one random bit in a binary string.\n */\nfunction alterBit(binaryStr) {\n  const index = Phaser.Math.Between(0, binaryStr.length - 1);\n  const newBit = binaryStr[index] === '0' ? '1' : '0';\n  return binaryStr.substring(0, index) + newBit + binaryStr.substring(index + 1);\n}\n\n/**\n * Computes the 8-bit two's complement representation of a signed number\n * using the \"invert and add 1\" method with bitwise operators.\n *\n * For n < 0:\n *   Uses ((~Math.abs(n) + 1) & 0xFF) to ensure the result fits in 8 bits.\n *\n * For n >= 0, simply returns the 8-bit binary string.\n */\nfunction computeTwosComplement(n) {\n  if (n >= 0) {\n    return n.toString(2).padStart(8, '0');\n  } else {\n    // Use bitwise operations to compute the 8-bit two's complement.\n    return ((~Math.abs(n) + 1) & 0xFF).toString(2).padStart(8, '0');\n  }\n}\n",
      "timestamp": "2025-02-04T13:47:52.509Z",
      "totalPoints": 0
    },
    {
      "id": "579e25e0-cb2a-47d7-9be5-ec13976d6d2d",
      "name": "Game",
      "code": "const config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    parent: 'phaser-game', // Make sure an element with id=\"phaser-game\" exists in your HTML\n    scene: {\n        preload: preload,\n        create: create,\n        update: update\n    }\n};\n\nconst game = new Phaser.Game(config);\n\n// Array of question objects for scalability\nconst questions = [\n    {\n        questionText: 'What is the capital of France?',\n        answers: ['A) Berlin', 'B) Paris', 'C) London'],\n        correct: 1 // using the index of the correct answer (0-based)\n    },\n    {\n        questionText: 'Which planet is known as the Red Planet?',\n        answers: ['A) Earth', 'B) Jupiter', 'C) Mars'],\n        correct: 2\n    },\n    {\n        questionText: 'What is the largest ocean on Earth?',\n        answers: ['A) Atlantic', 'B) Indian', 'C) Pacific'],\n        correct: 2\n    },\n    {\n        questionText: 'Who wrote \"Hamlet\"?',\n        answers: ['A) Charles Dickens', 'B) William Shakespeare', 'C) Mark Twain'],\n        correct: 1\n    },\n    {\n        questionText: 'What is the chemical symbol for Gold?',\n        answers: ['A) Au', 'B) Ag', 'C) Gd'],\n        correct: 0\n    },\n    {\n        questionText: 'In which year did the Titanic sink?',\n        answers: ['A) 1912', 'B) 1920', 'C) 1905'],\n        correct: 0\n    },\n    {\n        questionText: 'What is the tallest mountain in the world?',\n        answers: ['A) K2', 'B) Kangchenjunga', 'C) Mount Everest'],\n        correct: 2\n    },\n    {\n        questionText: 'Which element has the atomic number 1?',\n        answers: ['A) Oxygen', 'B) Hydrogen', 'C) Carbon'],\n        correct: 1\n    },\n    {\n        questionText: 'Who painted the Mona Lisa?',\n        answers: ['A) Vincent Van Gogh', 'B) Pablo Picasso', 'C) Leonardo da Vinci'],\n        correct: 2\n    },\n    {\n        questionText: 'What is the currency of Japan?',\n        answers: ['A) Yen', 'B) Dollar', 'C) Euro'],\n        correct: 0\n    }\n];\n\nlet currentQuestionIndex = 0;\nlet questionText;\nlet answerTexts = []; // array to hold the answer text objects\n\nfunction preload() {\n    console.log('Preload started');\n    this.load.image('background', 'https://picsum.photos/800/600');\n}\n\nfunction create() {\n    console.log('Create called');\n    // Add the background image and set its origin to the top-left corner\n    this.add.image(0, 0, 'background').setOrigin(0, 0);\n    \n    // Render the first question\n    renderQuestion.call(this);\n}\n\nfunction update() {\n    // Currently, no continuous updates are needed.\n}\n\n// Function to render a question\nfunction renderQuestion() {\n    // Clear any previous question (if it exists)\n    if (questionText) {\n        questionText.destroy();\n    }\n    answerTexts.forEach(function(textObj) {\n        textObj.destroy();\n    });\n    answerTexts = [];\n\n    // Get the current question object\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Add the question text at the top center of the screen\n    questionText = this.add.text(400, 150, currentQuestion.questionText, { fontSize: '24px', fill: '#ffffff' });\n    questionText.setOrigin(0.5);\n\n    // Dynamically render answer options\n    const startX = 200;\n    const gapX = 200;\n    const posY = 400;\n\n    currentQuestion.answers.forEach((answer, index) => {\n        let answerText = this.add.text(startX + index * gapX, posY, answer, { fontSize: '18px', fill: '#ffffff' });\n        answerText.setOrigin(0.5);\n        answerText.setInteractive(); // Enable input for this text\n        // Add an event handler for when an answer is clicked\n        answerText.on('pointerdown', () => {\n            checkAnswer.call(this, index);\n        });\n        answerTexts.push(answerText);\n    });\n}\n\n// Function to check the player's answer\nfunction checkAnswer(selectedIndex) {\n    const currentQuestion = questions[currentQuestionIndex];\n    if (selectedIndex === currentQuestion.correct) {\n        questionText.setText('Correct! Next question...');\ngameScore(\"579e25e0-cb2a-47d7-9be5-ec13976d6d2d\", 10)\n    } else {\n        questionText.setText('Incorrect. Next question...');\n    }\n    \n    // Delay moving to the next question so the player can read the feedback\n    this.time.delayedCall(2000, nextQuestion, [], this);\n}\n\n// Function to load the next question or restart the quiz\nfunction nextQuestion() {\n    currentQuestionIndex++;\n    if (currentQuestionIndex >= questions.length) {\n        // Optionally, you can restart the quiz or display a completion message\n        questionText.setText('Quiz complete!');\n        answerTexts.forEach(function(textObj) {\n            textObj.destroy();\n        });\n    } else {\n        renderQuestion.call(this);\n    }\n}\n",
      "timestamp": "2025-02-05T15:02:31.602Z",
      "totalPoints": 50
    },
    {
      "id": "eb88597c-cfd9-45cf-aa15-c46c5a1bd171",
      "name": "Grundwissen Quiz",
      "code": "const config = { type: Phaser.AUTO, parent: 'phaser-game', width: 600, height: 600, backgroundColor: '#f4f4f4', scene: { preload: preload, create: create } }; const game = new Phaser.Game(config); let score = 0; let currentQuestion = 0; const questions = [{ question: 'Was ist die Hauptstadt von Frankreich?', answers: ['Berlin', 'Paris', 'Madrid'], correctAnswer: 1 }, { question: 'Wie viele Planeten hat unser Sonnensystem?', answers: ['7', '8', '9'], correctAnswer: 1 }, { question: 'Wer schrieb \"Faust\"?', answers: ['Goethe', 'Schiller', 'Kafka'], correctAnswer: 0 }]; function preload() { this.load.image('background', 'https://cdn.pixabay.com/photo/2017/08/30/01/05/milky-way-2695569_1280.jpg'); } function create() { this.add.rectangle(300, 300, 550, 550, 0xffffff).setStrokeStyle(2, 0xcccccc); this.add.text(300, 80, 'Quizspiel', { fontSize: '32px', fill: '#333333', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); this.add.text(300, 130, 'Beantworte die Fragen richtig und sammle Punkte!', { fontSize: '16px', fill: '#666666', fontFamily: 'Arial, sans-serif' }).setOrigin(0.5); displayQuestion.call(this); } function displayQuestion() { const question = questions[currentQuestion]; this.add.text(300, 200, question.question, { fontSize: '24px', fill: '#333333', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); question.answers.forEach((answer, index) => { const answerButton = this.add.rectangle(300, 280 + (index * 60), 450, 50, index === 0 ? '#ff6f61' : index === 1 ? '#6b5b95' : '#88b04b').setInteractive(); this.add.text(300, 280 + (index * 60), answer, { fontSize: '20px', fill: '#ffffff', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); answerButton.on('pointerdown', () => { this.tweens.add({ targets: answerButton, scaleX: 0.95, scaleY: 0.95, duration: 100, yoyo: true, onComplete: () => checkAnswer.call(this, index) }); }); }); } function checkAnswer(selectedAnswer) { const question = questions[currentQuestion]; let feedbackText; if (selectedAnswer === question.correctAnswer) { score += 10; gameScore('eb88597c-cfd9-45cf-aa15-c46c5a1bd171', 10); feedbackText = this.add.text(300, 450, 'Richtige Antwort! +10 Punkte', { fontSize: '24px', fill: '#88b04b', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); } else { score -= 5; feedbackText = this.add.text(300, 450, 'Falsche Antwort! -5 Punkte', { fontSize: '24px', fill: '#ff6f61', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); } this.time.delayedCall(1000, () => { feedbackText.destroy(); currentQuestion++; if (currentQuestion >= questions.length) { this.add.text(300, 500, `Spiel beendet! Dein Punktestand: ${score}`, { fontSize: '24px', fill: '#333333', fontFamily: 'Arial, sans-serif', fontWeight: 'bold' }).setOrigin(0.5); currentQuestion = 0; score = 0; } else { this.scene.restart(); } }, [], this); }",
      "timestamp": "2025-02-06T00:00:16.790Z",
      "totalPoints": 250
    },
    {
      "id": "df30d10a-48bb-4f56-a32f-b60954bfaf02",
      "name": "Electrical Microscopes",
      "code": "var config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    scene: { preload: preload, create: create, update: update },\n    parent: 'phaser-game'\n};\n\nvar game = new Phaser.Game(config);\nvar questions = [\n    { id: \"q1\", questionText: \"Frage 1: Was ist ein Elektromikroskop?\", correctAnswer: \"Ein Mikroskop, das elektrische Strahlung verwendet, um Objekte zu untersuchen.\", wrongAnswer: \"Ein Mikroskop, das nur Licht verwendet.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q2\", questionText: \"Frage 2: Was zeigt ein Röntgenbild?\", correctAnswer: \"Die inneren Strukturen eines Objekts.\", wrongAnswer: \"Die Oberfläche eines Objekts.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q3\", questionText: \"Frage 3: Was ist ein Beispiel für ein optisches Instrument?\", correctAnswer: \"Ein Teleskop.\", wrongAnswer: \"Ein Mikrowellenherd.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q4\", questionText: \"Frage 4: Welche Wellenlänge hat sichtbares Licht?\", correctAnswer: \"Zwischen 400 und 700 Nanometern.\", wrongAnswer: \"Zwischen 100 und 200 Nanometern.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q5\", questionText: \"Frage 5: Was misst ein Spektrometer?\", correctAnswer: \"Das Lichtspektrum.\", wrongAnswer: \"Die Temperatur.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q6\", questionText: \"Frage 6: Was ist eine Linse?\", correctAnswer: \"Ein transparentes Material, das Licht bricht.\", wrongAnswer: \"Ein undurchsichtiges Material, das Licht blockiert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q7\", questionText: \"Frage 7: Was ist eine Diode?\", correctAnswer: \"Ein Bauelement, das den Strom in eine Richtung leitet.\", wrongAnswer: \"Ein Bauelement, das den Strom in beide Richtungen leitet.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q8\", questionText: \"Frage 8: Was bedeutet 'Photon'?\", correctAnswer: \"Ein Lichtteilchen.\", wrongAnswer: \"Ein Schallteilchen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q9\", questionText: \"Frage 9: Was beschreibt die Wellenlänge?\", correctAnswer: \"Den Abstand zwischen zwei aufeinanderfolgenden Wellenbergen.\", wrongAnswer: \"Die Geschwindigkeit einer Welle.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q10\", questionText: \"Frage 10: Was ist die Funktion eines Mikroskops?\", correctAnswer: \"Objekte zu vergrößern und Details sichtbar zu machen.\", wrongAnswer: \"Objekte zu verkleinern.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q11\", questionText: \"Frage 11: Welche Art von Mikroskop verwendet Elektronen?\", correctAnswer: \"Das Elektronenmikroskop.\", wrongAnswer: \"Das Lichtmikroskop.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q12\", questionText: \"Frage 12: Was ist die Auflösung eines Mikroskops?\", correctAnswer: \"Die Fähigkeit, feine Details zu unterscheiden.\", wrongAnswer: \"Die Fähigkeit, Farben darzustellen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q13\", questionText: \"Frage 13: Was zeigt ein Ultraschallgerät?\", correctAnswer: \"Bilder aus Schallwellen.\", wrongAnswer: \"Bilder aus Lichtwellen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q14\", questionText: \"Frage 14: Was ist ein Teleskop?\", correctAnswer: \"Ein Instrument, um entfernte Objekte zu betrachten.\", wrongAnswer: \"Ein Instrument, um Objekte zu berühren.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q15\", questionText: \"Frage 15: Was misst ein Barometer?\", correctAnswer: \"Den Luftdruck.\", wrongAnswer: \"Die Temperatur.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q16\", questionText: \"Frage 16: Was ist ein Thermometer?\", correctAnswer: \"Ein Gerät zur Messung der Temperatur.\", wrongAnswer: \"Ein Gerät zur Messung des Luftdrucks.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q17\", questionText: \"Frage 17: Was beschreibt der Begriff 'Reflexion'?\", correctAnswer: \"Das Zurückwerfen von Licht oder Schall.\", wrongAnswer: \"Die Absorption von Licht.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q18\", questionText: \"Frage 18: Was ist Brechung?\", correctAnswer: \"Die Ablenkung von Licht beim Übergang in ein anderes Medium.\", wrongAnswer: \"Die Reflexion von Licht an einer glatten Oberfläche.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q19\", questionText: \"Frage 19: Was ist ein Prisma?\", correctAnswer: \"Ein optisches Element, das Licht in seine Spektralfarben zerlegt.\", wrongAnswer: \"Ein Gerät, das Schall verstärkt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q20\", questionText: \"Frage 20: Was ist ein Kalorimeter?\", correctAnswer: \"Ein Gerät zur Messung der Wärme.\", wrongAnswer: \"Ein Gerät zur Messung der Lautstärke.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q21\", questionText: \"Frage 21: Was misst ein Hygrometer?\", correctAnswer: \"Die Luftfeuchtigkeit.\", wrongAnswer: \"Den Luftdruck.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q22\", questionText: \"Frage 22: Was ist ein Spektroskop?\", correctAnswer: \"Ein Gerät zur Untersuchung des Lichtspektrums.\", wrongAnswer: \"Ein Gerät zur Messung der Schallintensität.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q23\", questionText: \"Frage 23: Was beschreibt die Frequenz einer Welle?\", correctAnswer: \"Die Anzahl der Schwingungen pro Sekunde.\", wrongAnswer: \"Die Amplitude der Welle.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q24\", questionText: \"Frage 24: Was ist die Amplitude einer Welle?\", correctAnswer: \"Die maximale Auslenkung der Welle.\", wrongAnswer: \"Die Frequenz der Welle.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q25\", questionText: \"Frage 25: Was ist Interferenz?\", correctAnswer: \"Das Überlagern von zwei oder mehr Wellen.\", wrongAnswer: \"Das Brechen von Lichtstrahlen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q26\", questionText: \"Frage 26: Was bedeutet 'Polarisation'?\", correctAnswer: \"Die Ausrichtung der Schwingungsebene einer Welle.\", wrongAnswer: \"Die Brechung des Lichts.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q27\", questionText: \"Frage 27: Was ist ein Lasersystem?\", correctAnswer: \"Ein System, das kohärentes Licht erzeugt.\", wrongAnswer: \"Ein System, das nur unscharfes Licht erzeugt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q28\", questionText: \"Frage 28: Was ist ein Mikroskop?\", correctAnswer: \"Ein Instrument zur Vergrößerung kleiner Objekte.\", wrongAnswer: \"Ein Instrument zur Verkleinerung großer Objekte.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q29\", questionText: \"Frage 29: Was misst ein Spektrometer?\", correctAnswer: \"Das Spektrum des Lichts.\", wrongAnswer: \"Die Temperatur eines Objekts.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q30\", questionText: \"Frage 30: Was ist eine optische Faser?\", correctAnswer: \"Ein dünner Faden aus Glas zur Lichtübertragung.\", wrongAnswer: \"Ein dünner Draht zur Stromübertragung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q31\", questionText: \"Frage 31: Was ist ein Fiberoptik-Kabel?\", correctAnswer: \"Ein Kabel, das Lichtsignale überträgt.\", wrongAnswer: \"Ein Kabel, das elektrische Signale überträgt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q32\", questionText: \"Frage 32: Was beschreibt die Dispersion?\", correctAnswer: \"Die Aufspaltung von Licht in seine Farben.\", wrongAnswer: \"Die Bündelung von Licht zu einem Strahl.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q33\", questionText: \"Frage 33: Was ist ein Photometer?\", correctAnswer: \"Ein Gerät zur Messung der Lichtintensität.\", wrongAnswer: \"Ein Gerät zur Messung der Schallintensität.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q34\", questionText: \"Frage 34: Was ist ein Endoskop?\", correctAnswer: \"Ein Instrument zur Untersuchung des Inneren von Körperhöhlen.\", wrongAnswer: \"Ein Gerät zur Messung des Blutdrucks.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q35\", questionText: \"Frage 35: Was misst ein Tachometer?\", correctAnswer: \"Die Geschwindigkeit eines Fahrzeugs.\", wrongAnswer: \"Die Temperatur des Motors.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q36\", questionText: \"Frage 36: Was ist ein Anemometer?\", correctAnswer: \"Ein Gerät zur Messung der Windgeschwindigkeit.\", wrongAnswer: \"Ein Gerät zur Messung der Luftfeuchtigkeit.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q37\", questionText: \"Frage 37: Was beschreibt der Begriff 'Resonanz'?\", correctAnswer: \"Die Verstärkung einer Schwingung durch eine Frequenzanpassung.\", wrongAnswer: \"Die Dämpfung einer Schwingung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q38\", questionText: \"Frage 38: Was ist ein Spektrophotometer?\", correctAnswer: \"Ein Gerät zur Messung der Lichtabsorption.\", wrongAnswer: \"Ein Gerät zur Messung der elektrischen Spannung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q39\", questionText: \"Frage 39: Was beschreibt der Begriff 'Lumineszenz'?\", correctAnswer: \"Das Leuchten durch chemische oder physikalische Prozesse.\", wrongAnswer: \"Das Erhitzen eines Materials.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q40\", questionText: \"Frage 40: Was ist Fluoreszenz?\", correctAnswer: \"Die sofortige Emission von Licht nach Anregung.\", wrongAnswer: \"Die langsame Abgabe von Wärme.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q41\", questionText: \"Frage 41: Was ist ein Spektroskop?\", correctAnswer: \"Ein Gerät zur Untersuchung des Lichtspektrums.\", wrongAnswer: \"Ein Gerät zur Messung der Luftfeuchtigkeit.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q42\", questionText: \"Frage 42: Was ist ein Optoelektronisches Bauelement?\", correctAnswer: \"Ein Bauelement, das Licht in elektrische Signale umwandelt.\", wrongAnswer: \"Ein Bauelement, das elektrische Signale in Schall umwandelt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q43\", questionText: \"Frage 43: Was ist ein Infrarotsensor?\", correctAnswer: \"Ein Sensor zur Erkennung von Infrarotstrahlung.\", wrongAnswer: \"Ein Sensor zur Erkennung von Ultraviolettstrahlung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q44\", questionText: \"Frage 44: Was ist ein Photodetektor?\", correctAnswer: \"Ein Gerät zur Detektion von Licht.\", wrongAnswer: \"Ein Gerät zur Detektion von Schall.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q45\", questionText: \"Frage 45: Was beschreibt der Begriff 'Kohärenz'?\", correctAnswer: \"Die Phasengleichheit von Wellen.\", wrongAnswer: \"Die Unabhängigkeit von Wellen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q46\", questionText: \"Frage 46: Was ist ein Interferometer?\", correctAnswer: \"Ein Gerät zur Messung von Interferenzmustern.\", wrongAnswer: \"Ein Gerät zur Messung der Temperatur.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q47\", questionText: \"Frage 47: Was ist Laserlicht?\", correctAnswer: \"Kohärentes und monochromatisches Licht.\", wrongAnswer: \"Inkoherentes und breites Licht.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q48\", questionText: \"Frage 48: Was ist ein optischer Filter?\", correctAnswer: \"Ein Gerät, das bestimmte Wellenlängen durchlässt.\", wrongAnswer: \"Ein Gerät, das alle Wellenlängen blockiert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q49\", questionText: \"Frage 49: Was ist ein Diffusor?\", correctAnswer: \"Ein Gerät zur Streuung von Licht.\", wrongAnswer: \"Ein Gerät zur Bündelung von Licht.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q50\", questionText: \"Frage 50: Was misst ein Oszilloskop?\", correctAnswer: \"Elektrische Signale in Form von Wellen.\", wrongAnswer: \"Mechanische Schwingungen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q51\", questionText: \"Frage 51: Was ist ein Multimeter?\", correctAnswer: \"Ein Gerät zur Messung elektrischer Größen.\", wrongAnswer: \"Ein Gerät zur Messung der Schallintensität.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q52\", questionText: \"Frage 52: Was ist ein Transformator?\", correctAnswer: \"Ein Gerät zur Umwandlung von Spannungen.\", wrongAnswer: \"Ein Gerät zur Umwandlung von Frequenzen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q53\", questionText: \"Frage 53: Was ist ein Oszillator?\", correctAnswer: \"Ein Gerät, das periodische Schwingungen erzeugt.\", wrongAnswer: \"Ein Gerät, das elektrische Signale filtert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q54\", questionText: \"Frage 54: Was ist eine Photovoltaikzelle?\", correctAnswer: \"Ein Gerät, das Sonnenlicht in elektrische Energie umwandelt.\", wrongAnswer: \"Ein Gerät, das elektrische Energie in Licht umwandelt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q55\", questionText: \"Frage 55: Was ist ein Elektromotor?\", correctAnswer: \"Ein Gerät, das elektrische Energie in mechanische Bewegung umwandelt.\", wrongAnswer: \"Ein Gerät, das mechanische Bewegung in elektrische Energie umwandelt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q56\", questionText: \"Frage 56: Was ist ein Generator?\", correctAnswer: \"Ein Gerät, das mechanische Energie in elektrische Energie umwandelt.\", wrongAnswer: \"Ein Gerät, das elektrische Energie speichert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q57\", questionText: \"Frage 57: Was ist ein Relais?\", correctAnswer: \"Ein elektrisch gesteuertes Schaltgerät.\", wrongAnswer: \"Ein mechanischer Schalter.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q58\", questionText: \"Frage 58: Was ist eine Batterie?\", correctAnswer: \"Ein Energiespeicher, der chemische Energie in elektrische Energie umwandelt.\", wrongAnswer: \"Ein Gerät zur Umwandlung von elektrischer Energie in Wärme.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q59\", questionText: \"Frage 59: Was ist ein Kondensator?\", correctAnswer: \"Ein Bauelement zur Speicherung elektrischer Ladung.\", wrongAnswer: \"Ein Bauelement zur Verstärkung von Signalen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q60\", questionText: \"Frage 60: Was ist ein Widerstand?\", correctAnswer: \"Ein Bauelement, das den Stromfluss begrenzt.\", wrongAnswer: \"Ein Bauelement, das den Stromfluss verstärkt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q61\", questionText: \"Frage 61: Was ist ein Schaltkreis?\", correctAnswer: \"Ein geschlossener Stromkreis.\", wrongAnswer: \"Ein offener Stromkreis.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q62\", questionText: \"Frage 62: Was ist ein Mikroprozessor?\", correctAnswer: \"Ein integrierter Schaltkreis, der als Prozessor fungiert.\", wrongAnswer: \"Ein Speicherchip.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q63\", questionText: \"Frage 63: Was ist ein Sensor?\", correctAnswer: \"Ein Gerät, das physikalische Größen misst.\", wrongAnswer: \"Ein Gerät, das physikalische Größen erzeugt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q64\", questionText: \"Frage 64: Was ist die Einheit der elektrischen Spannung?\", correctAnswer: \"Volt.\", wrongAnswer: \"Ampere.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q65\", questionText: \"Frage 65: Was ist die Einheit des elektrischen Stroms?\", correctAnswer: \"Ampere.\", wrongAnswer: \"Ohm.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q66\", questionText: \"Frage 66: Was ist die Einheit des elektrischen Widerstands?\", correctAnswer: \"Ohm.\", wrongAnswer: \"Watt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q67\", questionText: \"Frage 67: Was ist ein Schaltplan?\", correctAnswer: \"Eine grafische Darstellung eines Stromkreises.\", wrongAnswer: \"Ein Diagramm zur Darstellung von Messwerten.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q68\", questionText: \"Frage 68: Was ist ein Breadboard?\", correctAnswer: \"Ein Steckbrett für Prototypen-Schaltungen.\", wrongAnswer: \"Ein Gerät zum Messen von Spannungen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q69\", questionText: \"Frage 69: Was ist eine Leiterplatte?\", correctAnswer: \"Eine Platte, auf der elektronische Bauteile montiert werden.\", wrongAnswer: \"Eine Platte zur Wärmeableitung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q70\", questionText: \"Frage 70: Was ist ein SMD-Bauteil?\", correctAnswer: \"Ein oberflächenmontiertes Bauteil.\", wrongAnswer: \"Ein durchkontaktiertes Bauteil.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q71\", questionText: \"Frage 71: Was ist ein Quarzoszillator?\", correctAnswer: \"Ein Bauelement zur Erzeugung stabiler Frequenzen.\", wrongAnswer: \"Ein Bauelement zur Speicherung von Daten.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q72\", questionText: \"Frage 72: Was ist ein Diodengleichrichter?\", correctAnswer: \"Ein Schaltkreis, der Wechselstrom in Gleichstrom umwandelt.\", wrongAnswer: \"Ein Schaltkreis, der Gleichstrom in Wechselstrom umwandelt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q73\", questionText: \"Frage 73: Was ist ein Logikgatter?\", correctAnswer: \"Ein Grundbaustein digitaler Schaltungen.\", wrongAnswer: \"Ein Bauelement analoger Schaltungen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q74\", questionText: \"Frage 74: Was ist ein FPGA?\", correctAnswer: \"Ein programmierbarer Logikbaustein.\", wrongAnswer: \"Ein fester Logikchip.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q75\", questionText: \"Frage 75: Was ist ein Bussystem?\", correctAnswer: \"Ein System zur Datenübertragung zwischen Komponenten.\", wrongAnswer: \"Ein System zur Spannungsumwandlung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q76\", questionText: \"Frage 76: Was ist ein Protokoll in der Datenkommunikation?\", correctAnswer: \"Eine festgelegte Reihe von Regeln zur Datenübertragung.\", wrongAnswer: \"Ein Gerät zur Datenübertragung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q77\", questionText: \"Frage 77: Was ist ein Router?\", correctAnswer: \"Ein Gerät, das Datenpakete zwischen Netzwerken weiterleitet.\", wrongAnswer: \"Ein Gerät zur Speicherung von Daten.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q78\", questionText: \"Frage 78: Was ist ein Switch?\", correctAnswer: \"Ein Gerät zur Verbindung von Netzwerkgeräten.\", wrongAnswer: \"Ein Gerät zur Umwandlung von Spannungen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q79\", questionText: \"Frage 79: Was ist eine IP-Adresse?\", correctAnswer: \"Eine eindeutige Kennung eines Geräts im Netzwerk.\", wrongAnswer: \"Eine Kennung eines elektrischen Bauteils.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q80\", questionText: \"Frage 80: Was ist ein Server?\", correctAnswer: \"Ein Computer, der Dienste für andere Computer bereitstellt.\", wrongAnswer: \"Ein Computer, der ausschließlich Spiele spielt.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q81\", questionText: \"Frage 81: Was ist Cloud Computing?\", correctAnswer: \"Die Bereitstellung von IT-Ressourcen über das Internet.\", wrongAnswer: \"Das Speichern von Daten auf einer lokalen Festplatte.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q82\", questionText: \"Frage 82: Was ist ein Algorithmus?\", correctAnswer: \"Eine endliche Folge von Anweisungen zur Lösung eines Problems.\", wrongAnswer: \"Ein zufälliger Prozess.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q83\", questionText: \"Frage 83: Was ist Programmierung?\", correctAnswer: \"Die Erstellung von Software durch Schreiben von Code.\", wrongAnswer: \"Das Zeichnen von Schaltplänen.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q84\", questionText: \"Frage 84: Was ist ein Compiler?\", correctAnswer: \"Ein Programm, das Quellcode in Maschinensprache übersetzt.\", wrongAnswer: \"Ein Programm, das Software installiert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q85\", questionText: \"Frage 85: Was ist Debugging?\", correctAnswer: \"Der Prozess der Fehlersuche in einem Programm.\", wrongAnswer: \"Der Prozess der Softwareinstallation.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q86\", questionText: \"Frage 86: Was ist ein Betriebssystem?\", correctAnswer: \"Software, die die Hardware eines Computers steuert.\", wrongAnswer: \"Ein Anwendungsprogramm.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q87\", questionText: \"Frage 87: Was ist ein Netzwerkprotokoll?\", correctAnswer: \"Ein Regelwerk für die Kommunikation in Netzwerken.\", wrongAnswer: \"Ein Gerät, das Daten speichert.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q88\", questionText: \"Frage 88: Was ist Virtualisierung?\", correctAnswer: \"Die Erstellung virtueller Versionen von Hardware oder Software.\", wrongAnswer: \"Die Installation von physischer Hardware.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q89\", questionText: \"Frage 89: Was ist ein Datenbankmanagementsystem (DBMS)?\", correctAnswer: \"Software zur Verwaltung von Datenbanken.\", wrongAnswer: \"Ein Programm zur Bildbearbeitung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q90\", questionText: \"Frage 90: Was ist Big Data?\", correctAnswer: \"Sehr große und komplexe Datensätze, die spezielle Verarbeitung erfordern.\", wrongAnswer: \"Kleine Datensätze.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q91\", questionText: \"Frage 91: Was ist Künstliche Intelligenz (KI)?\", correctAnswer: \"Die Simulation menschlicher Intelligenz durch Maschinen.\", wrongAnswer: \"Ein neuer Programmiersprachenstandard.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q92\", questionText: \"Frage 92: Was ist Maschinelles Lernen?\", correctAnswer: \"Ein Teilbereich der KI, bei dem Algorithmen aus Daten lernen.\", wrongAnswer: \"Ein manueller Prozess.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q93\", questionText: \"Frage 93: Was ist ein neuronales Netzwerk?\", correctAnswer: \"Ein System, das von der Struktur des menschlichen Gehirns inspiriert ist.\", wrongAnswer: \"Ein einfacher Algorithmus.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q94\", questionText: \"Frage 94: Was ist Deep Learning?\", correctAnswer: \"Ein Teilbereich des maschinellen Lernens, der tiefe neuronale Netzwerke nutzt.\", wrongAnswer: \"Ein flacher Algorithmus.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q95\", questionText: \"Frage 95: Was ist ein Cloud-Service?\", correctAnswer: \"Ein Dienst, der über das Internet bereitgestellt wird.\", wrongAnswer: \"Ein lokaler Dienst.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q96\", questionText: \"Frage 96: Was ist eine API?\", correctAnswer: \"Ein Satz von Routinen und Protokollen zur Interaktion mit Software.\", wrongAnswer: \"Ein Hardwaregerät.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q97\", questionText: \"Frage 97: Was ist Open Source Software?\", correctAnswer: \"Software, deren Quellcode frei zugänglich ist.\", wrongAnswer: \"Software, die kostenpflichtig ist.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q98\", questionText: \"Frage 98: Was ist ein Repository?\", correctAnswer: \"Ein Speicherort für Softwareprojekte, oft online gehostet.\", wrongAnswer: \"Ein Gerät zur Datenspeicherung.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q99\", questionText: \"Frage 99: Was ist Version Control?\", correctAnswer: \"Ein System zur Verwaltung von Änderungen an Code.\", wrongAnswer: \"Ein System zur Verwaltung von Hardware.\", correctScore: 1, wrongScore: -5 },\n    { id: \"q100\", questionText: \"Frage 100: Was ist Softwareentwicklung?\", correctAnswer: \"Der Prozess der Erstellung von Software.\", wrongAnswer: \"Der Prozess der Hardwaremontage.\", correctScore: 1, wrongScore: -5 }\n];\n\nvar currentQuestionIndex = 0;\n\nfunction preload() {\n    // Lade deine Bilder\n    this.load.image('background', '/games/background.png');\n    this.load.image('dropzone', '/games/dropzone.png');\n    this.load.image('optionCorrect', '/games/option_correct.png');\n    this.load.image('optionWrong', '/games/option_wrong.png');\n\n}\n\nfunction create() {\n    // Mische die Fragen zufällig\n    Phaser.Utils.Array.Shuffle(questions);\n\n    // Hintergrund hinzufügen\n    this.add.image(400, 300, 'background');\n\n    // Frageanzeige oben zentriert\n    this.questionDisplay = this.add.text(400, 50, '', {\n        fontSize: '24px',\n        color: '#ffffff'\n    }).setOrigin(0.5);\n\n    // Drop-Zone unten in der Mitte\n    this.dropZone = this.add.image(400, 500, 'dropzone').setInteractive().setScale(2.5);\n\n    // Erstelle Container für die Antwortoptionen (Bild + Text)\n    this.optionCorrectContainer = this.add.container(200, 300);\n    var correctImage = this.add.image(0, 0, 'optionCorrect');\n    var correctText = this.add.text(0, correctImage.height / 2 + 10, '', {\n        fontSize: '16px',\n        color: '#ffffff',\n        wordWrap: { width: 150 }\n    }).setOrigin(0.5, 0);\n    this.optionCorrectContainer.add([correctImage, correctText]);\n    this.optionCorrectContainer.setSize(correctImage.width, correctImage.height + correctText.height);\n    this.optionCorrectContainer.setInteractive();\n    this.input.setDraggable(this.optionCorrectContainer);\n\n    this.optionWrongContainer = this.add.container(600, 300);\n    var wrongImage = this.add.image(0, 0, 'optionWrong');\n    var wrongText = this.add.text(0, wrongImage.height / 2 + 10, '', {\n        fontSize: '16px',\n        color: '#ffffff',\n        wordWrap: { width: 150 }\n    }).setOrigin(0.5, 0);\n    this.optionWrongContainer.add([wrongImage, wrongText]);\n    this.optionWrongContainer.setSize(wrongImage.width, wrongImage.height + wrongText.height);\n    this.optionWrongContainer.setInteractive();\n    this.input.setDraggable(this.optionWrongContainer);\n\n    // Drag-Events\n    this.input.on('dragstart', function (pointer, container) {\n        container.list[0].setTint(0xff0000);  // Bild einfärben, wenn gezogen wird.\n    });\n\n    this.input.on('drag', function (pointer, container, dragX, dragY) {\n        container.x = dragX;\n        container.y = dragY;\n    });\n\n    this.input.on('dragend', function (pointer, container) {\n        container.list[0].clearTint();\n\n        var dropBounds = this.dropZone.getBounds();\n\n        // Prüfe, ob der Mittelpunkt des Containers in der Drop-Zone liegt.\n        if (Phaser.Geom.Rectangle.Contains(dropBounds, container.x, container.y)) {\n            var currentQuestion = questions[currentQuestionIndex];\n\n            if (container === this.optionCorrectContainer) {\n                // Richtige Antwort\n                gameScore(\"df30d10a-48bb-4f56-a32f-b60954bfaf02\", 5);\n                this.add.text(400, 400, 'Richtig!', {\n                    fontSize: '32px',\n                    color: '#00ff00'\n                }).setOrigin(0.5);\n\n                // Zur nächsten Frage wechseln (nach kurzem Delay)\n                this.time.delayedCall(1000, function () {\n                    currentQuestionIndex++;\n                    if (currentQuestionIndex < questions.length) {\n                        updateQuestion.call(this);\n                    } else {\n                        this.questionDisplay.setText('Du hast alle Fragen beantwortet!');\n                        // Interaktivität deaktivieren\n                        this.optionCorrectContainer.disableInteractive();\n                        this.optionWrongContainer.disableInteractive();\n                    }\n                }, [], this);\n            } else if (container === this.optionWrongContainer) {\n                // Falsche Antwort\n                gameScore(\"df30d10a-48bb-4f56-a32f-b60954bfaf02\", -5);\n                this.add.text(400, 400, 'Falsch!', {\n                    fontSize: '32px',\n                    color: '#ff0000'\n                }).setOrigin(0.5);\n                // Bei falscher Antwort könnte man den Spieler evtl. nochmal versuchen lassen.\n            }\n\n            // Container zurücksetzen\n            this.optionCorrectContainer.x = 200;\n            this.optionCorrectContainer.y = 300;\n            this.optionWrongContainer.x = 600;\n            this.optionWrongContainer.y = 300;\n        }\n    }, this);\n\n    // Zeige die erste Frage an.\n    updateQuestion.call(this);\n}\n\nfunction updateQuestion() {\n    var currentQuestion = questions[currentQuestionIndex];\n\n    // Frage aktualisieren\n    this.questionDisplay.setText(currentQuestion.questionText);\n\n    // Antworttexte in den Containern aktualisieren (Annahme: [Bild, Text])\n    this.optionCorrectContainer.list[1].setText(currentQuestion.correctAnswer);\n    this.optionWrongContainer.list[1].setText(currentQuestion.wrongAnswer);\n}\n\nfunction update() {\n    // Hier können weitere Animationen oder interaktive Elemente eingefügt werden.\n}\n",
      "timestamp": "2025-02-06T08:13:57.617Z",
      "totalPoints": 71
    },
    {
      "id": "df30d10a-48bb-4f56-a32f-b60954bfaf04",
      "name": "Internal Graph Game",
      "code": "",
      "timestamp": "2025-02-06T09:13:57.617Z",
      "totalPoints": 5
    },
    {
      "id": "130b610b-6718-4aaa-bda5-4e8022ab454a",
      "name": "Usability",
      "code": "var config = {type: Phaser.AUTO, width: 800, height: 600, parent: 'phaser-game', backgroundColor: '#ffffff', scene: {preload: preload, create: create, update: update}}; var game = new Phaser.Game(config); var score = 0; var scoreText; var questionText; var answerTexts = []; var currentQuestion = 0; var questions = [{question: 'Was bedeutet Usability nach ISO 9241?', answers: ['Effektivität, Effizienz, Zufriedenheit', 'Schönheit, Eleganz, Stil', 'Komplexität, Tiefe, Umfang', 'Schnelligkeit, Leistung, Performance'], correctAnswer: 0}, {question: 'Was ist der Unterschied zwischen Gibsons und Normans Affordanz-Begriff?', answers: ['Objektive vs. wahrgenommene Handlungsmöglichkeiten', 'Physische vs. virtuelle Eigenschaften', 'Einfache vs. komplexe Aktionen', 'Kein Unterschied'], correctAnswer: 0}, {question: 'Was ist ein mentales Modell?', answers: ['Die Vorstellung des Benutzers von einem System', 'Das Modell des Designers vom System', 'Ein Regelwerk für gutes Design', 'Eine Methode zur Nutzerforschung'], correctAnswer: 0}, {question: 'Was sind Image Schemata?', answers: ['Grundlegende Erfahrungsmuster', 'Spezifische Design-Richtlinien', 'Methoden zur Code-Optimierung', 'Arten von Benutzerschnittstellen'], correctAnswer: 0}, {question: 'Nenne ein Beispiel für ein Design-Pattern.', answers: ['Feature/Search/Browse', 'Goldener Schnitt', 'Nielsens Heuristiken', 'ISO 9241'], correctAnswer: 0}, {question: 'Was beschreibt die Fano-Bedingung?', answers:['Kein Codewort ist Anfang eines anderen Codewortes','Jedes Codewort ist einzigartig.','Codewörter müssen gleich lang sein.','Codewörter werden nach Wahrscheinlichkeit sortiert'], correctAnswer: 0}]; function preload() {} function create() {scoreText = this.add.text(16, 16, 'Score: 0', {fontSize: '20px', fill: '#000000'}); questionText = this.add.text(100, 100, '', {fontSize: '24px', fill: '#000000', wordWrap: {width: 600}}); for (var i = 0; i < 4; i++) {answerTexts[i] = this.add.text(120, 180 + i * 60, '', {fontSize: '18px', fill: '#000000', backgroundColor: '#eeeeee', padding: {x: 10, y: 5}}); answerTexts[i].setInteractive(); answerTexts[i].on('pointerdown', function(pointer, localX, localY, event) {checkAnswer(this.answerIndex);});} loadQuestion();} function update() {} function loadQuestion() {if (currentQuestion < questions.length) {var q = questions[currentQuestion]; questionText.setText(q.question); for (var i = 0; i < q.answers.length; i++) {answerTexts[i].setText(q.answers[i]); answerTexts[i].setVisible(true); answerTexts[i].answerIndex = i; answerTexts[i].setFill('#000000'); answerTexts[i].setBackgroundColor('#eeeeee');} } else {questionText.setText('Quiz beendet! Dein Score: ' + score); for (var i = 0; i < 4; i++) {answerTexts[i].setVisible(false);}}} function checkAnswer(answerIndex) {var points = 0; if (questions[currentQuestion].correctAnswer === answerIndex) { points = 1; score += points; scoreText.setText('Score: ' + score); answerTexts[answerIndex].setFill('#ffffff'); answerTexts[answerIndex].setBackgroundColor('#00ff00'); } else { answerTexts[answerIndex].setFill('#ffffff'); answerTexts[answerIndex].setBackgroundColor('#ff0000'); answerTexts[questions[currentQuestion].correctAnswer].setFill('#ffffff'); answerTexts[questions[currentQuestion].correctAnswer].setBackgroundColor('#00ff00');} gameScore('130b610b-6718-4aaa-bda5-4e8022ab454a', points); currentQuestion++; setTimeout(loadQuestion, 1000);} ",
      "timestamp": "2025-02-07T00:09:43.040Z",
      "totalPoints": 4
    },
    {
      "id": "f9dcaa5e-4f23-419e-ae36-10187a9039b6",
      "name": "QuizJump",
      "code": "const gameName = \"MCI_JumpNRun\";\nlet score = 0;\nlet player, cursors, currentQuestion = null, highestPlatformY = 0;\nlet gameOver = false;\n\nconst questions = [\n  { \n    question: \"Was ist laut ISO 9241 NICHT Teil der Usability?\", \n    options: [\"Effektivität\", \"Effizienz\", \"Zufriedenheit\", \"Ästhetik\"], \n    answer: 3, \n    feedback: \"Ästhetik gehört zur User Experience.\" \n  },\n  { \n    question: \"Was beschreibt 'Affordanz' nach Gibson?\", \n    options: [\"Nur wahrgenommene Eigenschaften\", \"Alle Handlungsmöglichkeiten\", \"Ästhetische Gestaltung\", \"Bedienungsanleitung\"], \n    answer: 1, \n    feedback: \"Gibson: Alle Möglichkeiten.\" \n  },\n  { \n    question: \"Was ist ein mentales Modell?\", \n    options: [\"Vom Designer erstellt\", \"Repräsentation im Bewusstsein\", \"Bedienungsanleitung\", \"Design-Prototyp\"], \n    answer: 1, \n    feedback: \"Mentale Modelle: Innere Vorstellungen.\" \n  },\n  { \n    question: \"Was ist KEIN Gestaltungsprinzip?\", \n    options: [\"Goldener Schnitt\", \"Nähe\", \"Ähnlichkeit\", \"Beliebigkeit\"], \n    answer: 3, \n    feedback: \"Beliebigkeit ist kein Prinzip.\" \n  },\n  { \n    question: \"Beispiel für 'Mapping'?\", \n    options: [\"Schieberegler\", \"Roter Button = Abbruch\", \"Grüner Button = OK\", \"Alle\"], \n    answer: 3, \n    feedback: \"Mappings für Intuition.\" \n  },\n  { \n    question: \"Was besagt die BITV?\", \n    options: [\"UI für Beeinträchtigte\", \"Webdesign-Standards\", \"Hilfstechnologie\", \"Alle\"], \n    answer: 3, \n    feedback: \"BITV: Digitale Zugänglichkeit.\" \n  },\n  { \n    question: \"Virtuelle Affordanzen?\", \n    options: [\"Starke physische Eigenschaften\", \"Text\", \"Aussehen/Position\", \"Selbsterklärend\"], \n    answer: 2, \n    feedback: \"Funktion durch Design.\" \n  },\n  { \n    question: \"Interface-Metaphern?\", \n    options: [\"Realistisch\", \"Mentales Modell\", \"Komplexität verbergen\", \"Verwirren\"], \n    answer: 1, \n    feedback: \"Metaphern helfen.\" \n  },\n  { \n    question: \"Nielsens Heuristiken?\", \n    options: [\"Goldener Schnitt\", \"Konsistenz\", \"Feature/Search/Browse\", \"DIN EN ISO 9241\"], \n    answer: 1, \n    feedback: \"z.B. Konsistenz.\" \n  },\n  { \n    question: \"'Image Schemata'?\", \n    options: [\"Diagramme\", \"Basale Erfahrungen\", \"Icons\", \"Vorlagen\"], \n    answer: 1, \n    feedback: \"Grundkonzepte.\" \n  }\n];\n\nvar config = { \n  type: Phaser.AUTO, \n  scale: { \n    mode: Phaser.Scale.FIT, \n    parent: 'phaser-game', \n    autoCenter: Phaser.Scale.CENTER_BOTH, \n    width: 800, \n    height: 600 \n  }, \n  physics: { \n    default: 'arcade', \n    arcade: { gravity: { y: 300 }, debug: false } \n  }, \n  scene: { preload: preload, create: create, update: update } \n};\n\nvar game = new Phaser.Game(config);\n\nfunction preload() {\n  this.load.image('sky', '/games/background.png');\n  this.load.image('platform', '/games/dropzone.png');\n  this.load.image('question_block', '/games/currency.png');\n  this.load.image('player', '/games/option_correct.png');\n  this.load.image('option_correct', '/games/option_correct.png');\n  this.load.image('option_wrong', '/games/option_wrong.png');\n}\n\nfunction create() {\n  // Add and scale the background image\n  let bg = this.add.image(0, 0, 'sky').setOrigin(0, 0);\n  let scaleX = this.cameras.main.width / bg.width;\n  let scaleY = this.cameras.main.height / bg.height;\n  bg.setScale(Math.max(scaleX, scaleY)).setScrollFactor(0);\n\n  // Create and attach platforms to the scene\n  this.platforms = this.physics.add.staticGroup();\n  const ground = this.platforms.create(400, 568, 'platform').setScale(8, 1).refreshBody();\n  const platform1 = this.platforms.create(600, 400, 'platform').setScale(2, 1).refreshBody();\n  const platform2 = this.platforms.create(50, 250, 'platform').setScale(2, 1).refreshBody();\n  const platform3 = this.platforms.create(750, 220, 'platform').setScale(2, 1).refreshBody();\n  highestPlatformY = 568;\n\n  // Create a group for question blocks and randomly attach them to initial platforms\n  this.questionBlocks = this.physics.add.staticGroup();\n  if (Phaser.Math.FloatBetween(0, 1) < 0.5) {\n    createQuestionBlock(this, platform1);\n  }\n  if (Phaser.Math.FloatBetween(0, 1) < 0.5) {\n    createQuestionBlock(this, platform2);\n  }\n  if (Phaser.Math.FloatBetween(0, 1) < 0.5) {\n    createQuestionBlock(this, platform3);\n  }\n\n  // Create the player\n  player = this.physics.add.sprite(400, 500, 'player').setScale(0.5);\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n  // Remove the ceiling so the player can move off the top\n  this.physics.world.checkCollision.up = false;\n\n  // Set up collisions\n  this.physics.add.collider(player, this.platforms, platformCollision, null, this);\n  this.physics.add.collider(player, this.questionBlocks, hitQuestionBlock, null, this);\n\n  // Set up input and camera follow\n  cursors = this.input.keyboard.createCursorKeys();\n  this.cameras.main.startFollow(player);\n\n  // Generate the first platform and set up periodic platform generation\n  generatePlatform.bind(this)();\n  this.time.addEvent({ delay: 2000, callback: generatePlatform.bind(this), callbackScope: this, loop: true });\n}\n\nfunction update() {\n  if (gameOver) return; // Stop update loop if the game is over\n\n  // Handle player movement\n  if (cursors.left.isDown) {\n    player.setVelocityX(-160);\n  } else if (cursors.right.isDown) {\n    player.setVelocityX(160);\n  } else {\n    player.setVelocityX(0);\n  }\n  if (cursors.up.isDown && player.body.touching.down) {\n    player.setVelocityY(-330);\n  }\n\n  // Check if the player has fallen below the visible screen\n  if (player.y > this.cameras.main.scrollY + config.height) {\n    gameOver = true;\n    showDeathScreen(this);\n  }\n}\n\nfunction generatePlatform() {\n  const x = Phaser.Math.Between(50, 750);\n  const y = highestPlatformY - Phaser.Math.Between(100, 200);\n  const platform = this.platforms.create(x, y, 'platform').setScale(2, 1).refreshBody();\n  highestPlatformY = y;\n\n  // Randomly attach a question block above this platform with a 50% chance\n  if (Phaser.Math.FloatBetween(0, 1) < 0.5) {\n    createQuestionBlock(this, platform);\n  }\n}\n\nfunction createQuestionBlock(scene, platform) {\n  // Increase the vertical offset so the question block is higher above the platform.\n  const verticalOffset = Phaser.Math.Between(50, 70); \n  // Add a slight horizontal variation (reduced compared to before).\n  const horizontalOffset = Phaser.Math.Between(-10, 10); \n  const x = platform.x + horizontalOffset;\n  const y = platform.y - verticalOffset;\n  let qb = scene.questionBlocks.create(x, y, 'question_block').setScale(2, 1).refreshBody();\n  qb.setData('questionIndex', Phaser.Math.Between(0, questions.length - 1));\n}\n\nfunction platformCollision(player, platform) {\n  // Optional: Add custom logic for collisions with platforms if needed.\n}\n\nfunction hitQuestionBlock(player, block) {\n  // Check for a collision from below and ensure no other question is active\n  if (player.body.touching.up && block.body.touching.down && !currentQuestion) {\n    const qIndex = block.getData('questionIndex');\n    currentQuestion = questions[qIndex];\n    block.disableBody(true, true);\n    showQuestion(this, currentQuestion);\n  }\n}\n\nfunction showQuestion(scene, question) {\n  // Create an array to hold all UI elements related to the question\n  scene.questionUI = [];\n\n  // Display the question text and its background\n  let qText = scene.add.text(100, 100, question.question, {\n    fontSize: '20px',\n    fill: '#333',\n    wordWrap: { width: 600 }\n  });\n  scene.questionUI.push(qText);\n\n  let qBg = scene.add.rectangle(\n    qText.x - 10,\n    qText.y - 10,\n    qText.width + 20,\n    qText.height + 20,\n    0x000000,\n    0.7\n  ).setOrigin(0);\n  scene.questionUI.push(qBg);\n\n  // For each option, display the option text and its background\n  question.options.forEach((option, index) => {\n    let optText = scene.add.text(120, 160 + index * 40, option, {\n      fontSize: '18px',\n      fill: '#333'\n    });\n    scene.questionUI.push(optText);\n\n    let optBg = scene.add.rectangle(\n      optText.x - 10,\n      optText.y - 10,\n      optText.width + 20,\n      optText.height + 20,\n      0x000000,\n      0.5\n    ).setOrigin(0);\n    scene.questionUI.push(optBg);\n\n    // Make the option interactive; when clicked, check the answer\n    optText.setInteractive();\n    optText.on('pointerdown', () => checkAnswer(scene, index, question));\n  });\n}\n\nfunction checkAnswer(scene, selectedIndex, question) {\n  // Properly delete all UI elements associated with the question\n  if (scene.questionUI) {\n    scene.questionUI.forEach(element => element.destroy());\n    scene.questionUI = null;\n  }\n\n  let feedbackImageKey = selectedIndex === question.answer ? 'option_correct' : 'option_wrong';\n  let feedbackColor = selectedIndex === question.answer ? '#0f0' : '#f00';\n  let feedbackTextString =\n    selectedIndex === question.answer\n      ? 'Richtig! ' + question.feedback\n      : 'Falsch! ' + question.feedback;\n\n  if (selectedIndex === question.answer) {\n    // Note: Ensure that the function 'gameScore' is defined elsewhere.\n    gameScore(gameName, 10);\n    score += 10;\n  }\n\n  // Display feedback\n  const feedbackBg = scene.add.rectangle(20, 400, 760, 60, 0x000000, 0.7).setOrigin(0);\n  let feedbackText = scene.add.text(30, 410, feedbackTextString, {\n    fontSize: '18px',\n    fill: feedbackColor\n  }).setDepth(100);\n  feedbackBg.width = feedbackText.width + 20;\n  feedbackBg.height = feedbackText.height + 20;\n  scene.add.image(400, 300, feedbackImageKey).setScale(0.5).setDepth(90);\n\n  currentQuestion = null;\n\n  // Remove the feedback after 3 seconds\n  scene.time.delayedCall(3000, () => {\n    feedbackText.destroy();\n    feedbackBg.destroy();\n  });\n}\n\nfunction showDeathScreen(scene) {\n  // Pause the physics and tint the player to indicate death.\n  scene.physics.pause();\n  player.setTint(0xff0000);\n\n  // Display the \"Game Over\" screen\n  const gameOverText = scene.add.text(\n    scene.cameras.main.scrollX + config.width / 2,\n    scene.cameras.main.scrollY + config.height / 2 - 50,\n    'Game Over',\n    { fontSize: '48px', fill: '#f00' }\n  ).setOrigin(0.5);\n\n  const restartText = scene.add.text(\n    scene.cameras.main.scrollX + config.width / 2,\n    scene.cameras.main.scrollY + config.height / 2 + 10,\n    'Press SPACE to Restart',\n    { fontSize: '24px', fill: '#fff' }\n  ).setOrigin(0.5);\n\n  // Wait for the player to press SPACE to restart the game\n  scene.input.keyboard.once('keydown-SPACE', () => {\n    scene.scene.restart();\n    gameOver = false;\n  });\n}\n",
      "timestamp": "2025-02-07T08:50:22.450Z",
      "totalPoints": 30
    }
  ]
}