{
  "games": [
    {
      "id": "343b3e02-d9f7-43e0-80db-abd6c517e295",
      "name": "Binary Multiplication Game",
      "code": "const config = { type: Phaser.AUTO, width: 800, height: 600, backgroundColor: '#f1f8e9', scene: { preload, create, update } }; const game = new Phaser.Game(config); let currentAnswers = []; let correctAnswer; let score = 0; let mistakes = []; function preload() { } function create() { this.titleText = this.add.text(400, 50, 'Binary Multiplication Game', { font: '28px Arial', fill: '#33691e' }).setOrigin(0.5); this.resultText = this.add.text(400, 500, '', { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); generateBinaryQuestion(this); this.input.keyboard.on('keydown', handleKeyPress, this); } function update() { } function generateBinaryQuestion(scene) { const a = Phaser.Math.Between(1, 15).toString(2); const b = Phaser.Math.Between(1, 15).toString(2); correctAnswer = parseInt(a, 2) * parseInt(b, 2); scene.questionText = scene.add.text(400, 150, `What is ${a} * ${b} in binary?`, { font: '24px Arial', fill: '#558b2f' }).setOrigin(0.5); if (scene.answerTexts) { scene.answerTexts.forEach(text => text.destroy()); } currentAnswers = [correctAnswer.toString(2), (correctAnswer + 1).toString(2), (correctAnswer - 1).toString(2)]; Phaser.Utils.Array.Shuffle(currentAnswers); scene.answerTexts = currentAnswers.map((answer, index) => { return scene.add.text(400, 200 + index * 50, `${index + 1}: ${answer}`, { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); }); } function handleKeyPress(event) { const keyIndex = parseInt(event.key) - 1; if (keyIndex >= 0 && keyIndex < currentAnswers.length) { const selectedAnswer = parseInt(currentAnswers[keyIndex], 2); if (selectedAnswer === correctAnswer) { this.resultText.setText('Correct!'); score += 10; gameScore('Binary Multiplication Game', score); } else { this.resultText.setText('Incorrect, try again!'); mistakes.push(`Mistake: ${currentAnswers[keyIndex]} for ${correctAnswer.toString(2)} (${currentAnswers.join(', ')})`); console.log(mistakes); } setTimeout(() => { resetQuestion(this); }, 500); } } function resetQuestion(scene) { scene.questionText.destroy(); scene.answerTexts.forEach(text => text.destroy()); scene.resultText.setText(''); generateBinaryQuestion(scene); }",
      "timestamp": "2025-02-03T17:54:58.011Z",
      "totalPoints": 0
    },
    {
      "id": "6d1823b3-5b7a-4099-a46d-c5415d5c86eb",
      "name": "Multiplication Game",
      "code": "const config = { type: Phaser.AUTO, width: 800, height: 600, backgroundColor: '#f1f8e9', scene: { preload, create, update } }; const game = new Phaser.Game(config); let currentAnswers = []; let correctAnswer; let score = 0; let mistakes = []; function preload() { } function create() { this.titleText = this.add.text(400, 50, 'Binary Multiplication Game', { font: '28px Arial', fill: '#33691e' }).setOrigin(0.5); this.resultText = this.add.text(400, 500, '', { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); generateBinaryQuestion(this); this.input.keyboard.on('keydown', handleKeyPress, this); } function update() { } function generateBinaryQuestion(scene) { const a = Phaser.Math.Between(1, 15).toString(2); const b = Phaser.Math.Between(1, 15).toString(2); correctAnswer = parseInt(a, 2) * parseInt(b, 2); scene.questionText = scene.add.text(400, 150, `What is ${a} * ${b} in binary?`, { font: '24px Arial', fill: '#558b2f' }).setOrigin(0.5); if (scene.answerTexts) { scene.answerTexts.forEach(text => text.destroy()); } currentAnswers = [correctAnswer.toString(2), (correctAnswer + 1).toString(2), (correctAnswer - 1).toString(2)]; Phaser.Utils.Array.Shuffle(currentAnswers); scene.answerTexts = currentAnswers.map((answer, index) => { return scene.add.text(400, 200 + index * 50, `${index + 1}: ${answer}`, { font: '24px Arial', fill: '#33691e' }).setOrigin(0.5); }); } function handleKeyPress(event) { const keyIndex = parseInt(event.key) - 1; if (keyIndex >= 0 && keyIndex < currentAnswers.length) { const selectedAnswer = parseInt(currentAnswers[keyIndex], 2); if (selectedAnswer === correctAnswer) { this.resultText.setText('Correct!'); score += 10; gameScore('Binary Multiplication Game', score); } else { this.resultText.setText('Incorrect, try again!'); mistakes.push(`Mistake: ${currentAnswers[keyIndex]} for ${correctAnswer.toString(2)} (${currentAnswers.join(', ')})`); console.log(mistakes); } setTimeout(() => { resetQuestion(this); }, 500); } } function resetQuestion(scene) { scene.questionText.destroy(); scene.answerTexts.forEach(text => text.destroy()); scene.resultText.setText(''); generateBinaryQuestion(scene); }",
      "timestamp": "2025-02-03T18:15:22.718Z",
      "totalPoints": 0
    }
  ]
}